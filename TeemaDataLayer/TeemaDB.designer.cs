#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18052
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TeemaDataLayer
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="TeemaApplication")]
	public partial class TeemaDBDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertBranch(Branch instance);
    partial void UpdateBranch(Branch instance);
    partial void DeleteBranch(Branch instance);
    partial void InsertWorkOtherLocation(WorkOtherLocation instance);
    partial void UpdateWorkOtherLocation(WorkOtherLocation instance);
    partial void DeleteWorkOtherLocation(WorkOtherLocation instance);
    partial void InsertBroughtForward(BroughtForward instance);
    partial void UpdateBroughtForward(BroughtForward instance);
    partial void DeleteBroughtForward(BroughtForward instance);
    partial void InsertCreatedSalaryDetail(CreatedSalaryDetail instance);
    partial void UpdateCreatedSalaryDetail(CreatedSalaryDetail instance);
    partial void DeleteCreatedSalaryDetail(CreatedSalaryDetail instance);
    partial void InsertDayOffRecord(DayOffRecord instance);
    partial void UpdateDayOffRecord(DayOffRecord instance);
    partial void DeleteDayOffRecord(DayOffRecord instance);
    partial void InsertDepartment(Department instance);
    partial void UpdateDepartment(Department instance);
    partial void DeleteDepartment(Department instance);
    partial void InsertDesignation(Designation instance);
    partial void UpdateDesignation(Designation instance);
    partial void DeleteDesignation(Designation instance);
    partial void InsertEmployee(Employee instance);
    partial void UpdateEmployee(Employee instance);
    partial void DeleteEmployee(Employee instance);
    partial void InsertEmployeeAttendance(EmployeeAttendance instance);
    partial void UpdateEmployeeAttendance(EmployeeAttendance instance);
    partial void DeleteEmployeeAttendance(EmployeeAttendance instance);
    partial void InsertEmployeeSalaryDetail(EmployeeSalaryDetail instance);
    partial void UpdateEmployeeSalaryDetail(EmployeeSalaryDetail instance);
    partial void DeleteEmployeeSalaryDetail(EmployeeSalaryDetail instance);
    partial void InsertFixedIncentive(FixedIncentive instance);
    partial void UpdateFixedIncentive(FixedIncentive instance);
    partial void DeleteFixedIncentive(FixedIncentive instance);
    partial void InsertGrantedLeave(GrantedLeave instance);
    partial void UpdateGrantedLeave(GrantedLeave instance);
    partial void DeleteGrantedLeave(GrantedLeave instance);
    partial void InsertOtherDeduction(OtherDeduction instance);
    partial void UpdateOtherDeduction(OtherDeduction instance);
    partial void DeleteOtherDeduction(OtherDeduction instance);
    partial void InsertOTRate(OTRate instance);
    partial void UpdateOTRate(OTRate instance);
    partial void DeleteOTRate(OTRate instance);
    partial void InsertOverTime(OverTime instance);
    partial void UpdateOverTime(OverTime instance);
    partial void DeleteOverTime(OverTime instance);
    partial void InsertPersonalLeaveRecord(PersonalLeaveRecord instance);
    partial void UpdatePersonalLeaveRecord(PersonalLeaveRecord instance);
    partial void DeletePersonalLeaveRecord(PersonalLeaveRecord instance);
    partial void InsertSalaryAdvance(SalaryAdvance instance);
    partial void UpdateSalaryAdvance(SalaryAdvance instance);
    partial void DeleteSalaryAdvance(SalaryAdvance instance);
    partial void InsertSalaryLoan(SalaryLoan instance);
    partial void UpdateSalaryLoan(SalaryLoan instance);
    partial void DeleteSalaryLoan(SalaryLoan instance);
    partial void InsertSalaryLoanInstallment(SalaryLoanInstallment instance);
    partial void UpdateSalaryLoanInstallment(SalaryLoanInstallment instance);
    partial void DeleteSalaryLoanInstallment(SalaryLoanInstallment instance);
    partial void InsertSubDepartment(SubDepartment instance);
    partial void UpdateSubDepartment(SubDepartment instance);
    partial void DeleteSubDepartment(SubDepartment instance);
    partial void InsertUserAccount(UserAccount instance);
    partial void UpdateUserAccount(UserAccount instance);
    partial void DeleteUserAccount(UserAccount instance);
    partial void InsertVariableIncentive(VariableIncentive instance);
    partial void UpdateVariableIncentive(VariableIncentive instance);
    partial void DeleteVariableIncentive(VariableIncentive instance);
    #endregion
		
		public TeemaDBDataContext() : 
				base(global::TeemaDataLayer.Properties.Settings.Default.TeemaApplicationConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public TeemaDBDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TeemaDBDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TeemaDBDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TeemaDBDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Branch> Branches
		{
			get
			{
				return this.GetTable<Branch>();
			}
		}
		
		public System.Data.Linq.Table<WorkOtherLocation> WorkOtherLocations
		{
			get
			{
				return this.GetTable<WorkOtherLocation>();
			}
		}
		
		public System.Data.Linq.Table<BroughtForward> BroughtForwards
		{
			get
			{
				return this.GetTable<BroughtForward>();
			}
		}
		
		public System.Data.Linq.Table<CreatedSalaryDetail> CreatedSalaryDetails
		{
			get
			{
				return this.GetTable<CreatedSalaryDetail>();
			}
		}
		
		public System.Data.Linq.Table<DayOffRecord> DayOffRecords
		{
			get
			{
				return this.GetTable<DayOffRecord>();
			}
		}
		
		public System.Data.Linq.Table<Department> Departments
		{
			get
			{
				return this.GetTable<Department>();
			}
		}
		
		public System.Data.Linq.Table<Designation> Designations
		{
			get
			{
				return this.GetTable<Designation>();
			}
		}
		
		public System.Data.Linq.Table<Employee> Employees
		{
			get
			{
				return this.GetTable<Employee>();
			}
		}
		
		public System.Data.Linq.Table<EmployeeAttendance> EmployeeAttendances
		{
			get
			{
				return this.GetTable<EmployeeAttendance>();
			}
		}
		
		public System.Data.Linq.Table<EmployeeSalaryDetail> EmployeeSalaryDetails
		{
			get
			{
				return this.GetTable<EmployeeSalaryDetail>();
			}
		}
		
		public System.Data.Linq.Table<FixedIncentive> FixedIncentives
		{
			get
			{
				return this.GetTable<FixedIncentive>();
			}
		}
		
		public System.Data.Linq.Table<GrantedLeave> GrantedLeaves
		{
			get
			{
				return this.GetTable<GrantedLeave>();
			}
		}
		
		public System.Data.Linq.Table<OtherDeduction> OtherDeductions
		{
			get
			{
				return this.GetTable<OtherDeduction>();
			}
		}
		
		public System.Data.Linq.Table<OTRate> OTRates
		{
			get
			{
				return this.GetTable<OTRate>();
			}
		}
		
		public System.Data.Linq.Table<OverTime> OverTimes
		{
			get
			{
				return this.GetTable<OverTime>();
			}
		}
		
		public System.Data.Linq.Table<PersonalLeaveRecord> PersonalLeaveRecords
		{
			get
			{
				return this.GetTable<PersonalLeaveRecord>();
			}
		}
		
		public System.Data.Linq.Table<SalaryAdvance> SalaryAdvances
		{
			get
			{
				return this.GetTable<SalaryAdvance>();
			}
		}
		
		public System.Data.Linq.Table<SalaryLoan> SalaryLoans
		{
			get
			{
				return this.GetTable<SalaryLoan>();
			}
		}
		
		public System.Data.Linq.Table<SalaryLoanInstallment> SalaryLoanInstallments
		{
			get
			{
				return this.GetTable<SalaryLoanInstallment>();
			}
		}
		
		public System.Data.Linq.Table<SubDepartment> SubDepartments
		{
			get
			{
				return this.GetTable<SubDepartment>();
			}
		}
		
		public System.Data.Linq.Table<UserAccount> UserAccounts
		{
			get
			{
				return this.GetTable<UserAccount>();
			}
		}
		
		public System.Data.Linq.Table<VariableIncentive> VariableIncentives
		{
			get
			{
				return this.GetTable<VariableIncentive>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Branch")]
	public partial class Branch : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BranchID;
		
		private string _BranchName;
		
		private System.Nullable<int> _CreatedBy;
		
		private System.Nullable<System.DateTime> _CreatedDate;
		
		private System.Nullable<int> _ModifiedBy;
		
		private System.Nullable<System.DateTime> _ModifiedDate;
		
		private EntitySet<Department> _Departments;
		
		private EntityRef<UserAccount> _UserAccount;
		
		private EntityRef<UserAccount> _UserAccount1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBranchIDChanging(int value);
    partial void OnBranchIDChanged();
    partial void OnBranchNameChanging(string value);
    partial void OnBranchNameChanged();
    partial void OnCreatedByChanging(System.Nullable<int> value);
    partial void OnCreatedByChanged();
    partial void OnCreatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedDateChanged();
    partial void OnModifiedByChanging(System.Nullable<int> value);
    partial void OnModifiedByChanged();
    partial void OnModifiedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedDateChanged();
    #endregion
		
		public Branch()
		{
			this._Departments = new EntitySet<Department>(new Action<Department>(this.attach_Departments), new Action<Department>(this.detach_Departments));
			this._UserAccount = default(EntityRef<UserAccount>);
			this._UserAccount1 = default(EntityRef<UserAccount>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BranchID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int BranchID
		{
			get
			{
				return this._BranchID;
			}
			set
			{
				if ((this._BranchID != value))
				{
					this.OnBranchIDChanging(value);
					this.SendPropertyChanging();
					this._BranchID = value;
					this.SendPropertyChanged("BranchID");
					this.OnBranchIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BranchName", DbType="VarChar(100)")]
		public string BranchName
		{
			get
			{
				return this._BranchName;
			}
			set
			{
				if ((this._BranchName != value))
				{
					this.OnBranchNameChanging(value);
					this.SendPropertyChanging();
					this._BranchName = value;
					this.SendPropertyChanged("BranchName");
					this.OnBranchNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="Int")]
		public System.Nullable<int> CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					if (this._UserAccount.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="Int")]
		public System.Nullable<int> ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					if (this._UserAccount1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Branch_Department", Storage="_Departments", ThisKey="BranchID", OtherKey="BranchID")]
		public EntitySet<Department> Departments
		{
			get
			{
				return this._Departments;
			}
			set
			{
				this._Departments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserAccount_Branch", Storage="_UserAccount", ThisKey="CreatedBy", OtherKey="UserID", IsForeignKey=true)]
		public UserAccount UserAccount
		{
			get
			{
				return this._UserAccount.Entity;
			}
			set
			{
				UserAccount previousValue = this._UserAccount.Entity;
				if (((previousValue != value) 
							|| (this._UserAccount.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserAccount.Entity = null;
						previousValue.Branches.Remove(this);
					}
					this._UserAccount.Entity = value;
					if ((value != null))
					{
						value.Branches.Add(this);
						this._CreatedBy = value.UserID;
					}
					else
					{
						this._CreatedBy = default(Nullable<int>);
					}
					this.SendPropertyChanged("UserAccount");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserAccount_Branch1", Storage="_UserAccount1", ThisKey="ModifiedBy", OtherKey="UserID", IsForeignKey=true)]
		public UserAccount UserAccount1
		{
			get
			{
				return this._UserAccount1.Entity;
			}
			set
			{
				UserAccount previousValue = this._UserAccount1.Entity;
				if (((previousValue != value) 
							|| (this._UserAccount1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserAccount1.Entity = null;
						previousValue.Branches1.Remove(this);
					}
					this._UserAccount1.Entity = value;
					if ((value != null))
					{
						value.Branches1.Add(this);
						this._ModifiedBy = value.UserID;
					}
					else
					{
						this._ModifiedBy = default(Nullable<int>);
					}
					this.SendPropertyChanged("UserAccount1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Departments(Department entity)
		{
			this.SendPropertyChanging();
			entity.Branch = this;
		}
		
		private void detach_Departments(Department entity)
		{
			this.SendPropertyChanging();
			entity.Branch = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.WorkOtherLocations")]
	public partial class WorkOtherLocation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _WorkOtherLocationID;
		
		private int _EmployeeID;
		
		private System.Nullable<System.DateTime> _WorkOLFrom;
		
		private System.Nullable<System.DateTime> _WorkOLTo;
		
		private string _WorkOLReason;
		
		private string _WorkOLLocation;
		
		private System.Nullable<int> _CreatedBy;
		
		private System.Nullable<System.DateTime> _CreatedDate;
		
		private System.Nullable<int> _ModifiedBy;
		
		private System.Nullable<System.DateTime> _ModifiedDate;
		
		private EntityRef<Employee> _Employee;
		
		private EntityRef<UserAccount> _UserAccount;
		
		private EntityRef<UserAccount> _UserAccount1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnWorkOtherLocationIDChanging(int value);
    partial void OnWorkOtherLocationIDChanged();
    partial void OnEmployeeIDChanging(int value);
    partial void OnEmployeeIDChanged();
    partial void OnWorkOLFromChanging(System.Nullable<System.DateTime> value);
    partial void OnWorkOLFromChanged();
    partial void OnWorkOLToChanging(System.Nullable<System.DateTime> value);
    partial void OnWorkOLToChanged();
    partial void OnWorkOLReasonChanging(string value);
    partial void OnWorkOLReasonChanged();
    partial void OnWorkOLLocationChanging(string value);
    partial void OnWorkOLLocationChanged();
    partial void OnCreatedByChanging(System.Nullable<int> value);
    partial void OnCreatedByChanged();
    partial void OnCreatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedDateChanged();
    partial void OnModifiedByChanging(System.Nullable<int> value);
    partial void OnModifiedByChanged();
    partial void OnModifiedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedDateChanged();
    #endregion
		
		public WorkOtherLocation()
		{
			this._Employee = default(EntityRef<Employee>);
			this._UserAccount = default(EntityRef<UserAccount>);
			this._UserAccount1 = default(EntityRef<UserAccount>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WorkOtherLocationID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int WorkOtherLocationID
		{
			get
			{
				return this._WorkOtherLocationID;
			}
			set
			{
				if ((this._WorkOtherLocationID != value))
				{
					this.OnWorkOtherLocationIDChanging(value);
					this.SendPropertyChanging();
					this._WorkOtherLocationID = value;
					this.SendPropertyChanged("WorkOtherLocationID");
					this.OnWorkOtherLocationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeID", DbType="Int NOT NULL")]
		public int EmployeeID
		{
			get
			{
				return this._EmployeeID;
			}
			set
			{
				if ((this._EmployeeID != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmployeeIDChanging(value);
					this.SendPropertyChanging();
					this._EmployeeID = value;
					this.SendPropertyChanged("EmployeeID");
					this.OnEmployeeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WorkOLFrom", DbType="DateTime")]
		public System.Nullable<System.DateTime> WorkOLFrom
		{
			get
			{
				return this._WorkOLFrom;
			}
			set
			{
				if ((this._WorkOLFrom != value))
				{
					this.OnWorkOLFromChanging(value);
					this.SendPropertyChanging();
					this._WorkOLFrom = value;
					this.SendPropertyChanged("WorkOLFrom");
					this.OnWorkOLFromChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WorkOLTo", DbType="DateTime")]
		public System.Nullable<System.DateTime> WorkOLTo
		{
			get
			{
				return this._WorkOLTo;
			}
			set
			{
				if ((this._WorkOLTo != value))
				{
					this.OnWorkOLToChanging(value);
					this.SendPropertyChanging();
					this._WorkOLTo = value;
					this.SendPropertyChanged("WorkOLTo");
					this.OnWorkOLToChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WorkOLReason", DbType="VarChar(500)")]
		public string WorkOLReason
		{
			get
			{
				return this._WorkOLReason;
			}
			set
			{
				if ((this._WorkOLReason != value))
				{
					this.OnWorkOLReasonChanging(value);
					this.SendPropertyChanging();
					this._WorkOLReason = value;
					this.SendPropertyChanged("WorkOLReason");
					this.OnWorkOLReasonChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WorkOLLocation", DbType="VarChar(500)")]
		public string WorkOLLocation
		{
			get
			{
				return this._WorkOLLocation;
			}
			set
			{
				if ((this._WorkOLLocation != value))
				{
					this.OnWorkOLLocationChanging(value);
					this.SendPropertyChanging();
					this._WorkOLLocation = value;
					this.SendPropertyChanged("WorkOLLocation");
					this.OnWorkOLLocationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="Int")]
		public System.Nullable<int> CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					if (this._UserAccount.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="Int")]
		public System.Nullable<int> ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					if (this._UserAccount1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_WorkOtherLocation", Storage="_Employee", ThisKey="EmployeeID", OtherKey="EmployeeID", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.WorkOtherLocations.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.WorkOtherLocations.Add(this);
						this._EmployeeID = value.EmployeeID;
					}
					else
					{
						this._EmployeeID = default(int);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserAccount_WorkOtherLocation", Storage="_UserAccount", ThisKey="CreatedBy", OtherKey="UserID", IsForeignKey=true)]
		public UserAccount UserAccount
		{
			get
			{
				return this._UserAccount.Entity;
			}
			set
			{
				UserAccount previousValue = this._UserAccount.Entity;
				if (((previousValue != value) 
							|| (this._UserAccount.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserAccount.Entity = null;
						previousValue.WorkOtherLocations.Remove(this);
					}
					this._UserAccount.Entity = value;
					if ((value != null))
					{
						value.WorkOtherLocations.Add(this);
						this._CreatedBy = value.UserID;
					}
					else
					{
						this._CreatedBy = default(Nullable<int>);
					}
					this.SendPropertyChanged("UserAccount");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserAccount_WorkOtherLocation1", Storage="_UserAccount1", ThisKey="ModifiedBy", OtherKey="UserID", IsForeignKey=true)]
		public UserAccount UserAccount1
		{
			get
			{
				return this._UserAccount1.Entity;
			}
			set
			{
				UserAccount previousValue = this._UserAccount1.Entity;
				if (((previousValue != value) 
							|| (this._UserAccount1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserAccount1.Entity = null;
						previousValue.WorkOtherLocations1.Remove(this);
					}
					this._UserAccount1.Entity = value;
					if ((value != null))
					{
						value.WorkOtherLocations1.Add(this);
						this._ModifiedBy = value.UserID;
					}
					else
					{
						this._ModifiedBy = default(Nullable<int>);
					}
					this.SendPropertyChanged("UserAccount1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BroughtForward")]
	public partial class BroughtForward : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BroughtForwardID;
		
		private System.Nullable<int> _EmployeeID;
		
		private System.Nullable<int> _Month;
		
		private System.Nullable<int> _Year;
		
		private System.Nullable<double> _Balance;
		
		private System.Nullable<int> _CreatedBy;
		
		private System.Nullable<System.DateTime> _CreatedDate;
		
		private System.Nullable<int> _ModifiedBy;
		
		private System.Nullable<System.DateTime> _ModifiedDate;
		
		private EntityRef<Employee> _Employee;
		
		private EntityRef<UserAccount> _UserAccount;
		
		private EntityRef<UserAccount> _UserAccount1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBroughtForwardIDChanging(int value);
    partial void OnBroughtForwardIDChanged();
    partial void OnEmployeeIDChanging(System.Nullable<int> value);
    partial void OnEmployeeIDChanged();
    partial void OnMonthChanging(System.Nullable<int> value);
    partial void OnMonthChanged();
    partial void OnYearChanging(System.Nullable<int> value);
    partial void OnYearChanged();
    partial void OnBalanceChanging(System.Nullable<double> value);
    partial void OnBalanceChanged();
    partial void OnCreatedByChanging(System.Nullable<int> value);
    partial void OnCreatedByChanged();
    partial void OnCreatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedDateChanged();
    partial void OnModifiedByChanging(System.Nullable<int> value);
    partial void OnModifiedByChanged();
    partial void OnModifiedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedDateChanged();
    #endregion
		
		public BroughtForward()
		{
			this._Employee = default(EntityRef<Employee>);
			this._UserAccount = default(EntityRef<UserAccount>);
			this._UserAccount1 = default(EntityRef<UserAccount>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BroughtForwardID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int BroughtForwardID
		{
			get
			{
				return this._BroughtForwardID;
			}
			set
			{
				if ((this._BroughtForwardID != value))
				{
					this.OnBroughtForwardIDChanging(value);
					this.SendPropertyChanging();
					this._BroughtForwardID = value;
					this.SendPropertyChanged("BroughtForwardID");
					this.OnBroughtForwardIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeID", DbType="Int")]
		public System.Nullable<int> EmployeeID
		{
			get
			{
				return this._EmployeeID;
			}
			set
			{
				if ((this._EmployeeID != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmployeeIDChanging(value);
					this.SendPropertyChanging();
					this._EmployeeID = value;
					this.SendPropertyChanged("EmployeeID");
					this.OnEmployeeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Month", DbType="Int")]
		public System.Nullable<int> Month
		{
			get
			{
				return this._Month;
			}
			set
			{
				if ((this._Month != value))
				{
					this.OnMonthChanging(value);
					this.SendPropertyChanging();
					this._Month = value;
					this.SendPropertyChanged("Month");
					this.OnMonthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Year", DbType="Int")]
		public System.Nullable<int> Year
		{
			get
			{
				return this._Year;
			}
			set
			{
				if ((this._Year != value))
				{
					this.OnYearChanging(value);
					this.SendPropertyChanging();
					this._Year = value;
					this.SendPropertyChanged("Year");
					this.OnYearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Balance", DbType="Float")]
		public System.Nullable<double> Balance
		{
			get
			{
				return this._Balance;
			}
			set
			{
				if ((this._Balance != value))
				{
					this.OnBalanceChanging(value);
					this.SendPropertyChanging();
					this._Balance = value;
					this.SendPropertyChanged("Balance");
					this.OnBalanceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="Int")]
		public System.Nullable<int> CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					if (this._UserAccount.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="Int")]
		public System.Nullable<int> ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					if (this._UserAccount1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_BroughtForward", Storage="_Employee", ThisKey="EmployeeID", OtherKey="EmployeeID", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.BroughtForwards.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.BroughtForwards.Add(this);
						this._EmployeeID = value.EmployeeID;
					}
					else
					{
						this._EmployeeID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserAccount_BroughtForward", Storage="_UserAccount", ThisKey="CreatedBy", OtherKey="UserID", IsForeignKey=true)]
		public UserAccount UserAccount
		{
			get
			{
				return this._UserAccount.Entity;
			}
			set
			{
				UserAccount previousValue = this._UserAccount.Entity;
				if (((previousValue != value) 
							|| (this._UserAccount.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserAccount.Entity = null;
						previousValue.BroughtForwards.Remove(this);
					}
					this._UserAccount.Entity = value;
					if ((value != null))
					{
						value.BroughtForwards.Add(this);
						this._CreatedBy = value.UserID;
					}
					else
					{
						this._CreatedBy = default(Nullable<int>);
					}
					this.SendPropertyChanged("UserAccount");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserAccount_BroughtForward1", Storage="_UserAccount1", ThisKey="ModifiedBy", OtherKey="UserID", IsForeignKey=true)]
		public UserAccount UserAccount1
		{
			get
			{
				return this._UserAccount1.Entity;
			}
			set
			{
				UserAccount previousValue = this._UserAccount1.Entity;
				if (((previousValue != value) 
							|| (this._UserAccount1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserAccount1.Entity = null;
						previousValue.BroughtForwards1.Remove(this);
					}
					this._UserAccount1.Entity = value;
					if ((value != null))
					{
						value.BroughtForwards1.Add(this);
						this._ModifiedBy = value.UserID;
					}
					else
					{
						this._ModifiedBy = default(Nullable<int>);
					}
					this.SendPropertyChanged("UserAccount1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CreatedSalaryDetails")]
	public partial class CreatedSalaryDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SalaryDetailsID;
		
		private System.Nullable<int> _EmployeeID;
		
		private System.Nullable<int> _Year;
		
		private System.Nullable<int> _Month;
		
		private System.Nullable<double> _BasicSalary;
		
		private System.Nullable<double> _BudgetAllowance;
		
		private System.Nullable<double> _Total;
		
		private System.Nullable<double> _NPDays;
		
		private System.Nullable<double> _PaidLeaveDays;
		
		private System.Nullable<double> _NoPayAmount;
		
		private System.Nullable<double> _SalaryToEPFETF;
		
		private System.Nullable<double> _OTNormalHours;
		
		private System.Nullable<double> _OTNormalHourlyRate;
		
		private System.Nullable<double> _OTDoubleHours;
		
		private System.Nullable<double> _OTDoubleHourlyRate;
		
		private System.Nullable<double> _OTTribleHours;
		
		private System.Nullable<double> _OTTribleHourlyRate;
		
		private System.Nullable<double> _PieceRateAmount;
		
		private System.Nullable<double> _GrossSalary;
		
		private System.Nullable<double> _SalaryAdvance;
		
		private System.Nullable<double> _TotalDeduction;
		
		private System.Nullable<double> _NetSalary;
		
		private System.Nullable<double> _RoundUpBroughtForward;
		
		private System.Nullable<double> _RoundUpCarryForward;
		
		private System.Nullable<double> _NetPayment;
		
		private System.Nullable<int> _CreatedBy;
		
		private System.Nullable<System.DateTime> _CreatedDate;
		
		private System.Nullable<int> _ModifiedBy;
		
		private System.Nullable<System.DateTime> _ModifiedDate;
		
		private EntityRef<Employee> _Employee;
		
		private EntityRef<UserAccount> _UserAccount;
		
		private EntityRef<UserAccount> _UserAccount1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSalaryDetailsIDChanging(int value);
    partial void OnSalaryDetailsIDChanged();
    partial void OnEmployeeIDChanging(System.Nullable<int> value);
    partial void OnEmployeeIDChanged();
    partial void OnYearChanging(System.Nullable<int> value);
    partial void OnYearChanged();
    partial void OnMonthChanging(System.Nullable<int> value);
    partial void OnMonthChanged();
    partial void OnBasicSalaryChanging(System.Nullable<double> value);
    partial void OnBasicSalaryChanged();
    partial void OnBudgetAllowanceChanging(System.Nullable<double> value);
    partial void OnBudgetAllowanceChanged();
    partial void OnTotalChanging(System.Nullable<double> value);
    partial void OnTotalChanged();
    partial void OnNPDaysChanging(System.Nullable<double> value);
    partial void OnNPDaysChanged();
    partial void OnPaidLeaveDaysChanging(System.Nullable<double> value);
    partial void OnPaidLeaveDaysChanged();
    partial void OnNoPayAmountChanging(System.Nullable<double> value);
    partial void OnNoPayAmountChanged();
    partial void OnSalaryToEPFETFChanging(System.Nullable<double> value);
    partial void OnSalaryToEPFETFChanged();
    partial void OnOTNormalHoursChanging(System.Nullable<double> value);
    partial void OnOTNormalHoursChanged();
    partial void OnOTNormalHourlyRateChanging(System.Nullable<double> value);
    partial void OnOTNormalHourlyRateChanged();
    partial void OnOTDoubleHoursChanging(System.Nullable<double> value);
    partial void OnOTDoubleHoursChanged();
    partial void OnOTDoubleHourlyRateChanging(System.Nullable<double> value);
    partial void OnOTDoubleHourlyRateChanged();
    partial void OnOTTribleHoursChanging(System.Nullable<double> value);
    partial void OnOTTribleHoursChanged();
    partial void OnOTTribleHourlyRateChanging(System.Nullable<double> value);
    partial void OnOTTribleHourlyRateChanged();
    partial void OnPieceRateAmountChanging(System.Nullable<double> value);
    partial void OnPieceRateAmountChanged();
    partial void OnGrossSalaryChanging(System.Nullable<double> value);
    partial void OnGrossSalaryChanged();
    partial void OnSalaryAdvanceChanging(System.Nullable<double> value);
    partial void OnSalaryAdvanceChanged();
    partial void OnTotalDeductionChanging(System.Nullable<double> value);
    partial void OnTotalDeductionChanged();
    partial void OnNetSalaryChanging(System.Nullable<double> value);
    partial void OnNetSalaryChanged();
    partial void OnRoundUpBroughtForwardChanging(System.Nullable<double> value);
    partial void OnRoundUpBroughtForwardChanged();
    partial void OnRoundUpCarryForwardChanging(System.Nullable<double> value);
    partial void OnRoundUpCarryForwardChanged();
    partial void OnNetPaymentChanging(System.Nullable<double> value);
    partial void OnNetPaymentChanged();
    partial void OnCreatedByChanging(System.Nullable<int> value);
    partial void OnCreatedByChanged();
    partial void OnCreatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedDateChanged();
    partial void OnModifiedByChanging(System.Nullable<int> value);
    partial void OnModifiedByChanged();
    partial void OnModifiedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedDateChanged();
    #endregion
		
		public CreatedSalaryDetail()
		{
			this._Employee = default(EntityRef<Employee>);
			this._UserAccount = default(EntityRef<UserAccount>);
			this._UserAccount1 = default(EntityRef<UserAccount>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SalaryDetailsID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SalaryDetailsID
		{
			get
			{
				return this._SalaryDetailsID;
			}
			set
			{
				if ((this._SalaryDetailsID != value))
				{
					this.OnSalaryDetailsIDChanging(value);
					this.SendPropertyChanging();
					this._SalaryDetailsID = value;
					this.SendPropertyChanged("SalaryDetailsID");
					this.OnSalaryDetailsIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeID", DbType="Int")]
		public System.Nullable<int> EmployeeID
		{
			get
			{
				return this._EmployeeID;
			}
			set
			{
				if ((this._EmployeeID != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmployeeIDChanging(value);
					this.SendPropertyChanging();
					this._EmployeeID = value;
					this.SendPropertyChanged("EmployeeID");
					this.OnEmployeeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Year", DbType="Int")]
		public System.Nullable<int> Year
		{
			get
			{
				return this._Year;
			}
			set
			{
				if ((this._Year != value))
				{
					this.OnYearChanging(value);
					this.SendPropertyChanging();
					this._Year = value;
					this.SendPropertyChanged("Year");
					this.OnYearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Month", DbType="Int")]
		public System.Nullable<int> Month
		{
			get
			{
				return this._Month;
			}
			set
			{
				if ((this._Month != value))
				{
					this.OnMonthChanging(value);
					this.SendPropertyChanging();
					this._Month = value;
					this.SendPropertyChanged("Month");
					this.OnMonthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BasicSalary", DbType="Float")]
		public System.Nullable<double> BasicSalary
		{
			get
			{
				return this._BasicSalary;
			}
			set
			{
				if ((this._BasicSalary != value))
				{
					this.OnBasicSalaryChanging(value);
					this.SendPropertyChanging();
					this._BasicSalary = value;
					this.SendPropertyChanged("BasicSalary");
					this.OnBasicSalaryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BudgetAllowance", DbType="Float")]
		public System.Nullable<double> BudgetAllowance
		{
			get
			{
				return this._BudgetAllowance;
			}
			set
			{
				if ((this._BudgetAllowance != value))
				{
					this.OnBudgetAllowanceChanging(value);
					this.SendPropertyChanging();
					this._BudgetAllowance = value;
					this.SendPropertyChanged("BudgetAllowance");
					this.OnBudgetAllowanceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Total", DbType="Float")]
		public System.Nullable<double> Total
		{
			get
			{
				return this._Total;
			}
			set
			{
				if ((this._Total != value))
				{
					this.OnTotalChanging(value);
					this.SendPropertyChanging();
					this._Total = value;
					this.SendPropertyChanged("Total");
					this.OnTotalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NPDays", DbType="Float")]
		public System.Nullable<double> NPDays
		{
			get
			{
				return this._NPDays;
			}
			set
			{
				if ((this._NPDays != value))
				{
					this.OnNPDaysChanging(value);
					this.SendPropertyChanging();
					this._NPDays = value;
					this.SendPropertyChanged("NPDays");
					this.OnNPDaysChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PaidLeaveDays", DbType="Float")]
		public System.Nullable<double> PaidLeaveDays
		{
			get
			{
				return this._PaidLeaveDays;
			}
			set
			{
				if ((this._PaidLeaveDays != value))
				{
					this.OnPaidLeaveDaysChanging(value);
					this.SendPropertyChanging();
					this._PaidLeaveDays = value;
					this.SendPropertyChanged("PaidLeaveDays");
					this.OnPaidLeaveDaysChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NoPayAmount", DbType="Float")]
		public System.Nullable<double> NoPayAmount
		{
			get
			{
				return this._NoPayAmount;
			}
			set
			{
				if ((this._NoPayAmount != value))
				{
					this.OnNoPayAmountChanging(value);
					this.SendPropertyChanging();
					this._NoPayAmount = value;
					this.SendPropertyChanged("NoPayAmount");
					this.OnNoPayAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SalaryToEPFETF", DbType="Float")]
		public System.Nullable<double> SalaryToEPFETF
		{
			get
			{
				return this._SalaryToEPFETF;
			}
			set
			{
				if ((this._SalaryToEPFETF != value))
				{
					this.OnSalaryToEPFETFChanging(value);
					this.SendPropertyChanging();
					this._SalaryToEPFETF = value;
					this.SendPropertyChanged("SalaryToEPFETF");
					this.OnSalaryToEPFETFChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OTNormalHours", DbType="Float")]
		public System.Nullable<double> OTNormalHours
		{
			get
			{
				return this._OTNormalHours;
			}
			set
			{
				if ((this._OTNormalHours != value))
				{
					this.OnOTNormalHoursChanging(value);
					this.SendPropertyChanging();
					this._OTNormalHours = value;
					this.SendPropertyChanged("OTNormalHours");
					this.OnOTNormalHoursChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OTNormalHourlyRate", DbType="Float")]
		public System.Nullable<double> OTNormalHourlyRate
		{
			get
			{
				return this._OTNormalHourlyRate;
			}
			set
			{
				if ((this._OTNormalHourlyRate != value))
				{
					this.OnOTNormalHourlyRateChanging(value);
					this.SendPropertyChanging();
					this._OTNormalHourlyRate = value;
					this.SendPropertyChanged("OTNormalHourlyRate");
					this.OnOTNormalHourlyRateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OTDoubleHours", DbType="Float")]
		public System.Nullable<double> OTDoubleHours
		{
			get
			{
				return this._OTDoubleHours;
			}
			set
			{
				if ((this._OTDoubleHours != value))
				{
					this.OnOTDoubleHoursChanging(value);
					this.SendPropertyChanging();
					this._OTDoubleHours = value;
					this.SendPropertyChanged("OTDoubleHours");
					this.OnOTDoubleHoursChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OTDoubleHourlyRate", DbType="Float")]
		public System.Nullable<double> OTDoubleHourlyRate
		{
			get
			{
				return this._OTDoubleHourlyRate;
			}
			set
			{
				if ((this._OTDoubleHourlyRate != value))
				{
					this.OnOTDoubleHourlyRateChanging(value);
					this.SendPropertyChanging();
					this._OTDoubleHourlyRate = value;
					this.SendPropertyChanged("OTDoubleHourlyRate");
					this.OnOTDoubleHourlyRateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OTTribleHours", DbType="Float")]
		public System.Nullable<double> OTTribleHours
		{
			get
			{
				return this._OTTribleHours;
			}
			set
			{
				if ((this._OTTribleHours != value))
				{
					this.OnOTTribleHoursChanging(value);
					this.SendPropertyChanging();
					this._OTTribleHours = value;
					this.SendPropertyChanged("OTTribleHours");
					this.OnOTTribleHoursChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OTTribleHourlyRate", DbType="Float")]
		public System.Nullable<double> OTTribleHourlyRate
		{
			get
			{
				return this._OTTribleHourlyRate;
			}
			set
			{
				if ((this._OTTribleHourlyRate != value))
				{
					this.OnOTTribleHourlyRateChanging(value);
					this.SendPropertyChanging();
					this._OTTribleHourlyRate = value;
					this.SendPropertyChanged("OTTribleHourlyRate");
					this.OnOTTribleHourlyRateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PieceRateAmount", DbType="Float")]
		public System.Nullable<double> PieceRateAmount
		{
			get
			{
				return this._PieceRateAmount;
			}
			set
			{
				if ((this._PieceRateAmount != value))
				{
					this.OnPieceRateAmountChanging(value);
					this.SendPropertyChanging();
					this._PieceRateAmount = value;
					this.SendPropertyChanged("PieceRateAmount");
					this.OnPieceRateAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GrossSalary", DbType="Float")]
		public System.Nullable<double> GrossSalary
		{
			get
			{
				return this._GrossSalary;
			}
			set
			{
				if ((this._GrossSalary != value))
				{
					this.OnGrossSalaryChanging(value);
					this.SendPropertyChanging();
					this._GrossSalary = value;
					this.SendPropertyChanged("GrossSalary");
					this.OnGrossSalaryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SalaryAdvance", DbType="Float")]
		public System.Nullable<double> SalaryAdvance
		{
			get
			{
				return this._SalaryAdvance;
			}
			set
			{
				if ((this._SalaryAdvance != value))
				{
					this.OnSalaryAdvanceChanging(value);
					this.SendPropertyChanging();
					this._SalaryAdvance = value;
					this.SendPropertyChanged("SalaryAdvance");
					this.OnSalaryAdvanceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalDeduction", DbType="Float")]
		public System.Nullable<double> TotalDeduction
		{
			get
			{
				return this._TotalDeduction;
			}
			set
			{
				if ((this._TotalDeduction != value))
				{
					this.OnTotalDeductionChanging(value);
					this.SendPropertyChanging();
					this._TotalDeduction = value;
					this.SendPropertyChanged("TotalDeduction");
					this.OnTotalDeductionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NetSalary", DbType="Float")]
		public System.Nullable<double> NetSalary
		{
			get
			{
				return this._NetSalary;
			}
			set
			{
				if ((this._NetSalary != value))
				{
					this.OnNetSalaryChanging(value);
					this.SendPropertyChanging();
					this._NetSalary = value;
					this.SendPropertyChanged("NetSalary");
					this.OnNetSalaryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoundUpBroughtForward", DbType="Float")]
		public System.Nullable<double> RoundUpBroughtForward
		{
			get
			{
				return this._RoundUpBroughtForward;
			}
			set
			{
				if ((this._RoundUpBroughtForward != value))
				{
					this.OnRoundUpBroughtForwardChanging(value);
					this.SendPropertyChanging();
					this._RoundUpBroughtForward = value;
					this.SendPropertyChanged("RoundUpBroughtForward");
					this.OnRoundUpBroughtForwardChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoundUpCarryForward", DbType="Float")]
		public System.Nullable<double> RoundUpCarryForward
		{
			get
			{
				return this._RoundUpCarryForward;
			}
			set
			{
				if ((this._RoundUpCarryForward != value))
				{
					this.OnRoundUpCarryForwardChanging(value);
					this.SendPropertyChanging();
					this._RoundUpCarryForward = value;
					this.SendPropertyChanged("RoundUpCarryForward");
					this.OnRoundUpCarryForwardChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NetPayment", DbType="Float")]
		public System.Nullable<double> NetPayment
		{
			get
			{
				return this._NetPayment;
			}
			set
			{
				if ((this._NetPayment != value))
				{
					this.OnNetPaymentChanging(value);
					this.SendPropertyChanging();
					this._NetPayment = value;
					this.SendPropertyChanged("NetPayment");
					this.OnNetPaymentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="Int")]
		public System.Nullable<int> CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					if (this._UserAccount.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="Int")]
		public System.Nullable<int> ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					if (this._UserAccount1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_CreatedSalaryDetail", Storage="_Employee", ThisKey="EmployeeID", OtherKey="EmployeeID", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.CreatedSalaryDetails.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.CreatedSalaryDetails.Add(this);
						this._EmployeeID = value.EmployeeID;
					}
					else
					{
						this._EmployeeID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserAccount_CreatedSalaryDetail", Storage="_UserAccount", ThisKey="CreatedBy", OtherKey="UserID", IsForeignKey=true)]
		public UserAccount UserAccount
		{
			get
			{
				return this._UserAccount.Entity;
			}
			set
			{
				UserAccount previousValue = this._UserAccount.Entity;
				if (((previousValue != value) 
							|| (this._UserAccount.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserAccount.Entity = null;
						previousValue.CreatedSalaryDetails.Remove(this);
					}
					this._UserAccount.Entity = value;
					if ((value != null))
					{
						value.CreatedSalaryDetails.Add(this);
						this._CreatedBy = value.UserID;
					}
					else
					{
						this._CreatedBy = default(Nullable<int>);
					}
					this.SendPropertyChanged("UserAccount");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserAccount_CreatedSalaryDetail1", Storage="_UserAccount1", ThisKey="ModifiedBy", OtherKey="UserID", IsForeignKey=true)]
		public UserAccount UserAccount1
		{
			get
			{
				return this._UserAccount1.Entity;
			}
			set
			{
				UserAccount previousValue = this._UserAccount1.Entity;
				if (((previousValue != value) 
							|| (this._UserAccount1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserAccount1.Entity = null;
						previousValue.CreatedSalaryDetails1.Remove(this);
					}
					this._UserAccount1.Entity = value;
					if ((value != null))
					{
						value.CreatedSalaryDetails1.Add(this);
						this._ModifiedBy = value.UserID;
					}
					else
					{
						this._ModifiedBy = default(Nullable<int>);
					}
					this.SendPropertyChanged("UserAccount1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DayOffRecord")]
	public partial class DayOffRecord : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DayOffID;
		
		private int _EmployeeID;
		
		private System.Nullable<System.DateTime> _DayOffFrom;
		
		private System.Nullable<System.DateTime> _DayOffTo;
		
		private string _DayOffReason;
		
		private System.Nullable<int> _CreatedBy;
		
		private System.Nullable<System.DateTime> _CreatedDate;
		
		private System.Nullable<int> _ModifiedBy;
		
		private System.Nullable<System.DateTime> _ModifiedDate;
		
		private EntityRef<Employee> _Employee;
		
		private EntityRef<UserAccount> _UserAccount;
		
		private EntityRef<UserAccount> _UserAccount1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDayOffIDChanging(int value);
    partial void OnDayOffIDChanged();
    partial void OnEmployeeIDChanging(int value);
    partial void OnEmployeeIDChanged();
    partial void OnDayOffFromChanging(System.Nullable<System.DateTime> value);
    partial void OnDayOffFromChanged();
    partial void OnDayOffToChanging(System.Nullable<System.DateTime> value);
    partial void OnDayOffToChanged();
    partial void OnDayOffReasonChanging(string value);
    partial void OnDayOffReasonChanged();
    partial void OnCreatedByChanging(System.Nullable<int> value);
    partial void OnCreatedByChanged();
    partial void OnCreatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedDateChanged();
    partial void OnModifiedByChanging(System.Nullable<int> value);
    partial void OnModifiedByChanged();
    partial void OnModifiedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedDateChanged();
    #endregion
		
		public DayOffRecord()
		{
			this._Employee = default(EntityRef<Employee>);
			this._UserAccount = default(EntityRef<UserAccount>);
			this._UserAccount1 = default(EntityRef<UserAccount>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DayOffID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int DayOffID
		{
			get
			{
				return this._DayOffID;
			}
			set
			{
				if ((this._DayOffID != value))
				{
					this.OnDayOffIDChanging(value);
					this.SendPropertyChanging();
					this._DayOffID = value;
					this.SendPropertyChanged("DayOffID");
					this.OnDayOffIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeID", DbType="Int NOT NULL")]
		public int EmployeeID
		{
			get
			{
				return this._EmployeeID;
			}
			set
			{
				if ((this._EmployeeID != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmployeeIDChanging(value);
					this.SendPropertyChanging();
					this._EmployeeID = value;
					this.SendPropertyChanged("EmployeeID");
					this.OnEmployeeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DayOffFrom", DbType="DateTime")]
		public System.Nullable<System.DateTime> DayOffFrom
		{
			get
			{
				return this._DayOffFrom;
			}
			set
			{
				if ((this._DayOffFrom != value))
				{
					this.OnDayOffFromChanging(value);
					this.SendPropertyChanging();
					this._DayOffFrom = value;
					this.SendPropertyChanged("DayOffFrom");
					this.OnDayOffFromChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DayOffTo", DbType="DateTime")]
		public System.Nullable<System.DateTime> DayOffTo
		{
			get
			{
				return this._DayOffTo;
			}
			set
			{
				if ((this._DayOffTo != value))
				{
					this.OnDayOffToChanging(value);
					this.SendPropertyChanging();
					this._DayOffTo = value;
					this.SendPropertyChanged("DayOffTo");
					this.OnDayOffToChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DayOffReason", DbType="VarChar(500)")]
		public string DayOffReason
		{
			get
			{
				return this._DayOffReason;
			}
			set
			{
				if ((this._DayOffReason != value))
				{
					this.OnDayOffReasonChanging(value);
					this.SendPropertyChanging();
					this._DayOffReason = value;
					this.SendPropertyChanged("DayOffReason");
					this.OnDayOffReasonChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="Int")]
		public System.Nullable<int> CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					if (this._UserAccount.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="Int")]
		public System.Nullable<int> ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					if (this._UserAccount1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_DayOffRecord", Storage="_Employee", ThisKey="EmployeeID", OtherKey="EmployeeID", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.DayOffRecords.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.DayOffRecords.Add(this);
						this._EmployeeID = value.EmployeeID;
					}
					else
					{
						this._EmployeeID = default(int);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserAccount_DayOffRecord", Storage="_UserAccount", ThisKey="CreatedBy", OtherKey="UserID", IsForeignKey=true)]
		public UserAccount UserAccount
		{
			get
			{
				return this._UserAccount.Entity;
			}
			set
			{
				UserAccount previousValue = this._UserAccount.Entity;
				if (((previousValue != value) 
							|| (this._UserAccount.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserAccount.Entity = null;
						previousValue.DayOffRecords.Remove(this);
					}
					this._UserAccount.Entity = value;
					if ((value != null))
					{
						value.DayOffRecords.Add(this);
						this._CreatedBy = value.UserID;
					}
					else
					{
						this._CreatedBy = default(Nullable<int>);
					}
					this.SendPropertyChanged("UserAccount");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserAccount_DayOffRecord1", Storage="_UserAccount1", ThisKey="ModifiedBy", OtherKey="UserID", IsForeignKey=true)]
		public UserAccount UserAccount1
		{
			get
			{
				return this._UserAccount1.Entity;
			}
			set
			{
				UserAccount previousValue = this._UserAccount1.Entity;
				if (((previousValue != value) 
							|| (this._UserAccount1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserAccount1.Entity = null;
						previousValue.DayOffRecords1.Remove(this);
					}
					this._UserAccount1.Entity = value;
					if ((value != null))
					{
						value.DayOffRecords1.Add(this);
						this._ModifiedBy = value.UserID;
					}
					else
					{
						this._ModifiedBy = default(Nullable<int>);
					}
					this.SendPropertyChanged("UserAccount1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Department")]
	public partial class Department : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DepartmentID;
		
		private string _DepartmentName;
		
		private System.Nullable<int> _BranchID;
		
		private System.Nullable<int> _CreatedBy;
		
		private System.Nullable<System.DateTime> _CreatedDate;
		
		private System.Nullable<int> _ModifiedBy;
		
		private System.Nullable<System.DateTime> _ModifiedDate;
		
		private EntitySet<SubDepartment> _SubDepartments;
		
		private EntityRef<Branch> _Branch;
		
		private EntityRef<UserAccount> _UserAccount;
		
		private EntityRef<UserAccount> _UserAccount1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDepartmentIDChanging(int value);
    partial void OnDepartmentIDChanged();
    partial void OnDepartmentNameChanging(string value);
    partial void OnDepartmentNameChanged();
    partial void OnBranchIDChanging(System.Nullable<int> value);
    partial void OnBranchIDChanged();
    partial void OnCreatedByChanging(System.Nullable<int> value);
    partial void OnCreatedByChanged();
    partial void OnCreatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedDateChanged();
    partial void OnModifiedByChanging(System.Nullable<int> value);
    partial void OnModifiedByChanged();
    partial void OnModifiedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedDateChanged();
    #endregion
		
		public Department()
		{
			this._SubDepartments = new EntitySet<SubDepartment>(new Action<SubDepartment>(this.attach_SubDepartments), new Action<SubDepartment>(this.detach_SubDepartments));
			this._Branch = default(EntityRef<Branch>);
			this._UserAccount = default(EntityRef<UserAccount>);
			this._UserAccount1 = default(EntityRef<UserAccount>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DepartmentID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int DepartmentID
		{
			get
			{
				return this._DepartmentID;
			}
			set
			{
				if ((this._DepartmentID != value))
				{
					this.OnDepartmentIDChanging(value);
					this.SendPropertyChanging();
					this._DepartmentID = value;
					this.SendPropertyChanged("DepartmentID");
					this.OnDepartmentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DepartmentName", DbType="VarChar(500)")]
		public string DepartmentName
		{
			get
			{
				return this._DepartmentName;
			}
			set
			{
				if ((this._DepartmentName != value))
				{
					this.OnDepartmentNameChanging(value);
					this.SendPropertyChanging();
					this._DepartmentName = value;
					this.SendPropertyChanged("DepartmentName");
					this.OnDepartmentNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BranchID", DbType="Int")]
		public System.Nullable<int> BranchID
		{
			get
			{
				return this._BranchID;
			}
			set
			{
				if ((this._BranchID != value))
				{
					if (this._Branch.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBranchIDChanging(value);
					this.SendPropertyChanging();
					this._BranchID = value;
					this.SendPropertyChanged("BranchID");
					this.OnBranchIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="Int")]
		public System.Nullable<int> CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					if (this._UserAccount.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="Int")]
		public System.Nullable<int> ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					if (this._UserAccount1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Department_SubDepartment", Storage="_SubDepartments", ThisKey="DepartmentID", OtherKey="DepartmentID")]
		public EntitySet<SubDepartment> SubDepartments
		{
			get
			{
				return this._SubDepartments;
			}
			set
			{
				this._SubDepartments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Branch_Department", Storage="_Branch", ThisKey="BranchID", OtherKey="BranchID", IsForeignKey=true)]
		public Branch Branch
		{
			get
			{
				return this._Branch.Entity;
			}
			set
			{
				Branch previousValue = this._Branch.Entity;
				if (((previousValue != value) 
							|| (this._Branch.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Branch.Entity = null;
						previousValue.Departments.Remove(this);
					}
					this._Branch.Entity = value;
					if ((value != null))
					{
						value.Departments.Add(this);
						this._BranchID = value.BranchID;
					}
					else
					{
						this._BranchID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Branch");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserAccount_Department", Storage="_UserAccount", ThisKey="CreatedBy", OtherKey="UserID", IsForeignKey=true)]
		public UserAccount UserAccount
		{
			get
			{
				return this._UserAccount.Entity;
			}
			set
			{
				UserAccount previousValue = this._UserAccount.Entity;
				if (((previousValue != value) 
							|| (this._UserAccount.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserAccount.Entity = null;
						previousValue.Departments.Remove(this);
					}
					this._UserAccount.Entity = value;
					if ((value != null))
					{
						value.Departments.Add(this);
						this._CreatedBy = value.UserID;
					}
					else
					{
						this._CreatedBy = default(Nullable<int>);
					}
					this.SendPropertyChanged("UserAccount");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserAccount_Department1", Storage="_UserAccount1", ThisKey="ModifiedBy", OtherKey="UserID", IsForeignKey=true)]
		public UserAccount UserAccount1
		{
			get
			{
				return this._UserAccount1.Entity;
			}
			set
			{
				UserAccount previousValue = this._UserAccount1.Entity;
				if (((previousValue != value) 
							|| (this._UserAccount1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserAccount1.Entity = null;
						previousValue.Departments1.Remove(this);
					}
					this._UserAccount1.Entity = value;
					if ((value != null))
					{
						value.Departments1.Add(this);
						this._ModifiedBy = value.UserID;
					}
					else
					{
						this._ModifiedBy = default(Nullable<int>);
					}
					this.SendPropertyChanged("UserAccount1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SubDepartments(SubDepartment entity)
		{
			this.SendPropertyChanging();
			entity.Department = this;
		}
		
		private void detach_SubDepartments(SubDepartment entity)
		{
			this.SendPropertyChanging();
			entity.Department = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Designation")]
	public partial class Designation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DesignationID;
		
		private string _Designation1;
		
		private System.Nullable<int> _CreatedBy;
		
		private System.Nullable<System.DateTime> _CreatedDate;
		
		private System.Nullable<int> _ModifiedBy;
		
		private System.Nullable<System.DateTime> _ModifiedDate;
		
		private EntitySet<Employee> _Employees;
		
		private EntityRef<UserAccount> _UserAccount;
		
		private EntityRef<UserAccount> _UserAccount1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDesignationIDChanging(int value);
    partial void OnDesignationIDChanged();
    partial void OnDesignation1Changing(string value);
    partial void OnDesignation1Changed();
    partial void OnCreatedByChanging(System.Nullable<int> value);
    partial void OnCreatedByChanged();
    partial void OnCreatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedDateChanged();
    partial void OnModifiedByChanging(System.Nullable<int> value);
    partial void OnModifiedByChanged();
    partial void OnModifiedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedDateChanged();
    #endregion
		
		public Designation()
		{
			this._Employees = new EntitySet<Employee>(new Action<Employee>(this.attach_Employees), new Action<Employee>(this.detach_Employees));
			this._UserAccount = default(EntityRef<UserAccount>);
			this._UserAccount1 = default(EntityRef<UserAccount>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DesignationID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int DesignationID
		{
			get
			{
				return this._DesignationID;
			}
			set
			{
				if ((this._DesignationID != value))
				{
					this.OnDesignationIDChanging(value);
					this.SendPropertyChanging();
					this._DesignationID = value;
					this.SendPropertyChanged("DesignationID");
					this.OnDesignationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Designation", Storage="_Designation1", DbType="VarChar(100)")]
		public string Designation1
		{
			get
			{
				return this._Designation1;
			}
			set
			{
				if ((this._Designation1 != value))
				{
					this.OnDesignation1Changing(value);
					this.SendPropertyChanging();
					this._Designation1 = value;
					this.SendPropertyChanged("Designation1");
					this.OnDesignation1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="Int")]
		public System.Nullable<int> CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					if (this._UserAccount.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="Int")]
		public System.Nullable<int> ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					if (this._UserAccount1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Designation_Employee", Storage="_Employees", ThisKey="DesignationID", OtherKey="DesignationID")]
		public EntitySet<Employee> Employees
		{
			get
			{
				return this._Employees;
			}
			set
			{
				this._Employees.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserAccount_Designation", Storage="_UserAccount", ThisKey="CreatedBy", OtherKey="UserID", IsForeignKey=true)]
		public UserAccount UserAccount
		{
			get
			{
				return this._UserAccount.Entity;
			}
			set
			{
				UserAccount previousValue = this._UserAccount.Entity;
				if (((previousValue != value) 
							|| (this._UserAccount.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserAccount.Entity = null;
						previousValue.Designations.Remove(this);
					}
					this._UserAccount.Entity = value;
					if ((value != null))
					{
						value.Designations.Add(this);
						this._CreatedBy = value.UserID;
					}
					else
					{
						this._CreatedBy = default(Nullable<int>);
					}
					this.SendPropertyChanged("UserAccount");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserAccount_Designation1", Storage="_UserAccount1", ThisKey="ModifiedBy", OtherKey="UserID", IsForeignKey=true)]
		public UserAccount UserAccount1
		{
			get
			{
				return this._UserAccount1.Entity;
			}
			set
			{
				UserAccount previousValue = this._UserAccount1.Entity;
				if (((previousValue != value) 
							|| (this._UserAccount1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserAccount1.Entity = null;
						previousValue.Designations1.Remove(this);
					}
					this._UserAccount1.Entity = value;
					if ((value != null))
					{
						value.Designations1.Add(this);
						this._ModifiedBy = value.UserID;
					}
					else
					{
						this._ModifiedBy = default(Nullable<int>);
					}
					this.SendPropertyChanged("UserAccount1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Employees(Employee entity)
		{
			this.SendPropertyChanging();
			entity.Designation = this;
		}
		
		private void detach_Employees(Employee entity)
		{
			this.SendPropertyChanging();
			entity.Designation = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Employee")]
	public partial class Employee : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EmployeeID;
		
		private string _TokenNo;
		
		private System.Nullable<int> _EnrolmentID;
		
		private string _Name;
		
		private string _Gender;
		
		private System.Nullable<System.DateTime> _DateOfAppointment;
		
		private string _EPFNo;
		
		private string _NICNo;
		
		private string _EmployeeCatagory;
		
		private string _EmployeeGrade;
		
		private System.Nullable<int> _NoPayCalculataionDate;
		
		private System.Nullable<bool> _PieceRateEntitled;
		
		private System.Nullable<bool> _EPFEntitled;
		
		private System.Nullable<int> _DesignationID;
		
		private System.Nullable<int> _SubDepartmentID;
		
		private System.Nullable<int> _CreatedBy;
		
		private System.Nullable<System.DateTime> _CreatedDate;
		
		private System.Nullable<int> _ModifiedBy;
		
		private System.Nullable<System.DateTime> _ModifiedDate;
		
		private EntitySet<WorkOtherLocation> _WorkOtherLocations;
		
		private EntitySet<BroughtForward> _BroughtForwards;
		
		private EntitySet<CreatedSalaryDetail> _CreatedSalaryDetails;
		
		private EntitySet<DayOffRecord> _DayOffRecords;
		
		private EntitySet<EmployeeAttendance> _EmployeeAttendances;
		
		private EntitySet<FixedIncentive> _FixedIncentives;
		
		private EntitySet<GrantedLeave> _GrantedLeaves;
		
		private EntitySet<OtherDeduction> _OtherDeductions;
		
		private EntitySet<OverTime> _OverTimes;
		
		private EntitySet<PersonalLeaveRecord> _PersonalLeaveRecords;
		
		private EntitySet<SalaryAdvance> _SalaryAdvances;
		
		private EntitySet<SalaryAdvance> _SalaryAdvances1;
		
		private EntitySet<SalaryLoan> _SalaryLoans;
		
		private EntitySet<SalaryLoan> _SalaryLoans1;
		
		private EntitySet<VariableIncentive> _VariableIncentives;
		
		private EntityRef<Designation> _Designation;
		
		private EntityRef<EmployeeSalaryDetail> _EmployeeSalaryDetail;
		
		private EntityRef<SubDepartment> _SubDepartment;
		
		private EntityRef<UserAccount> _UserAccount;
		
		private EntityRef<UserAccount> _UserAccount1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEmployeeIDChanging(int value);
    partial void OnEmployeeIDChanged();
    partial void OnTokenNoChanging(string value);
    partial void OnTokenNoChanged();
    partial void OnEnrolmentIDChanging(System.Nullable<int> value);
    partial void OnEnrolmentIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnGenderChanging(string value);
    partial void OnGenderChanged();
    partial void OnDateOfAppointmentChanging(System.Nullable<System.DateTime> value);
    partial void OnDateOfAppointmentChanged();
    partial void OnEPFNoChanging(string value);
    partial void OnEPFNoChanged();
    partial void OnNICNoChanging(string value);
    partial void OnNICNoChanged();
    partial void OnEmployeeCatagoryChanging(string value);
    partial void OnEmployeeCatagoryChanged();
    partial void OnEmployeeGradeChanging(string value);
    partial void OnEmployeeGradeChanged();
    partial void OnNoPayCalculataionDateChanging(System.Nullable<int> value);
    partial void OnNoPayCalculataionDateChanged();
    partial void OnPieceRateEntitledChanging(System.Nullable<bool> value);
    partial void OnPieceRateEntitledChanged();
    partial void OnEPFEntitledChanging(System.Nullable<bool> value);
    partial void OnEPFEntitledChanged();
    partial void OnDesignationIDChanging(System.Nullable<int> value);
    partial void OnDesignationIDChanged();
    partial void OnSubDepartmentIDChanging(System.Nullable<int> value);
    partial void OnSubDepartmentIDChanged();
    partial void OnCreatedByChanging(System.Nullable<int> value);
    partial void OnCreatedByChanged();
    partial void OnCreatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedDateChanged();
    partial void OnModifiedByChanging(System.Nullable<int> value);
    partial void OnModifiedByChanged();
    partial void OnModifiedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedDateChanged();
    #endregion
		
		public Employee()
		{
			this._WorkOtherLocations = new EntitySet<WorkOtherLocation>(new Action<WorkOtherLocation>(this.attach_WorkOtherLocations), new Action<WorkOtherLocation>(this.detach_WorkOtherLocations));
			this._BroughtForwards = new EntitySet<BroughtForward>(new Action<BroughtForward>(this.attach_BroughtForwards), new Action<BroughtForward>(this.detach_BroughtForwards));
			this._CreatedSalaryDetails = new EntitySet<CreatedSalaryDetail>(new Action<CreatedSalaryDetail>(this.attach_CreatedSalaryDetails), new Action<CreatedSalaryDetail>(this.detach_CreatedSalaryDetails));
			this._DayOffRecords = new EntitySet<DayOffRecord>(new Action<DayOffRecord>(this.attach_DayOffRecords), new Action<DayOffRecord>(this.detach_DayOffRecords));
			this._EmployeeAttendances = new EntitySet<EmployeeAttendance>(new Action<EmployeeAttendance>(this.attach_EmployeeAttendances), new Action<EmployeeAttendance>(this.detach_EmployeeAttendances));
			this._FixedIncentives = new EntitySet<FixedIncentive>(new Action<FixedIncentive>(this.attach_FixedIncentives), new Action<FixedIncentive>(this.detach_FixedIncentives));
			this._GrantedLeaves = new EntitySet<GrantedLeave>(new Action<GrantedLeave>(this.attach_GrantedLeaves), new Action<GrantedLeave>(this.detach_GrantedLeaves));
			this._OtherDeductions = new EntitySet<OtherDeduction>(new Action<OtherDeduction>(this.attach_OtherDeductions), new Action<OtherDeduction>(this.detach_OtherDeductions));
			this._OverTimes = new EntitySet<OverTime>(new Action<OverTime>(this.attach_OverTimes), new Action<OverTime>(this.detach_OverTimes));
			this._PersonalLeaveRecords = new EntitySet<PersonalLeaveRecord>(new Action<PersonalLeaveRecord>(this.attach_PersonalLeaveRecords), new Action<PersonalLeaveRecord>(this.detach_PersonalLeaveRecords));
			this._SalaryAdvances = new EntitySet<SalaryAdvance>(new Action<SalaryAdvance>(this.attach_SalaryAdvances), new Action<SalaryAdvance>(this.detach_SalaryAdvances));
			this._SalaryAdvances1 = new EntitySet<SalaryAdvance>(new Action<SalaryAdvance>(this.attach_SalaryAdvances1), new Action<SalaryAdvance>(this.detach_SalaryAdvances1));
			this._SalaryLoans = new EntitySet<SalaryLoan>(new Action<SalaryLoan>(this.attach_SalaryLoans), new Action<SalaryLoan>(this.detach_SalaryLoans));
			this._SalaryLoans1 = new EntitySet<SalaryLoan>(new Action<SalaryLoan>(this.attach_SalaryLoans1), new Action<SalaryLoan>(this.detach_SalaryLoans1));
			this._VariableIncentives = new EntitySet<VariableIncentive>(new Action<VariableIncentive>(this.attach_VariableIncentives), new Action<VariableIncentive>(this.detach_VariableIncentives));
			this._Designation = default(EntityRef<Designation>);
			this._EmployeeSalaryDetail = default(EntityRef<EmployeeSalaryDetail>);
			this._SubDepartment = default(EntityRef<SubDepartment>);
			this._UserAccount = default(EntityRef<UserAccount>);
			this._UserAccount1 = default(EntityRef<UserAccount>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int EmployeeID
		{
			get
			{
				return this._EmployeeID;
			}
			set
			{
				if ((this._EmployeeID != value))
				{
					if (this._EmployeeSalaryDetail.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmployeeIDChanging(value);
					this.SendPropertyChanging();
					this._EmployeeID = value;
					this.SendPropertyChanged("EmployeeID");
					this.OnEmployeeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TokenNo", DbType="VarChar(100)")]
		public string TokenNo
		{
			get
			{
				return this._TokenNo;
			}
			set
			{
				if ((this._TokenNo != value))
				{
					this.OnTokenNoChanging(value);
					this.SendPropertyChanging();
					this._TokenNo = value;
					this.SendPropertyChanged("TokenNo");
					this.OnTokenNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EnrolmentID", DbType="Int")]
		public System.Nullable<int> EnrolmentID
		{
			get
			{
				return this._EnrolmentID;
			}
			set
			{
				if ((this._EnrolmentID != value))
				{
					this.OnEnrolmentIDChanging(value);
					this.SendPropertyChanging();
					this._EnrolmentID = value;
					this.SendPropertyChanged("EnrolmentID");
					this.OnEnrolmentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(1000)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Gender", DbType="VarChar(10)")]
		public string Gender
		{
			get
			{
				return this._Gender;
			}
			set
			{
				if ((this._Gender != value))
				{
					this.OnGenderChanging(value);
					this.SendPropertyChanging();
					this._Gender = value;
					this.SendPropertyChanged("Gender");
					this.OnGenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfAppointment", DbType="Date")]
		public System.Nullable<System.DateTime> DateOfAppointment
		{
			get
			{
				return this._DateOfAppointment;
			}
			set
			{
				if ((this._DateOfAppointment != value))
				{
					this.OnDateOfAppointmentChanging(value);
					this.SendPropertyChanging();
					this._DateOfAppointment = value;
					this.SendPropertyChanged("DateOfAppointment");
					this.OnDateOfAppointmentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EPFNo", DbType="VarChar(100)")]
		public string EPFNo
		{
			get
			{
				return this._EPFNo;
			}
			set
			{
				if ((this._EPFNo != value))
				{
					this.OnEPFNoChanging(value);
					this.SendPropertyChanging();
					this._EPFNo = value;
					this.SendPropertyChanged("EPFNo");
					this.OnEPFNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NICNo", DbType="VarChar(10)")]
		public string NICNo
		{
			get
			{
				return this._NICNo;
			}
			set
			{
				if ((this._NICNo != value))
				{
					this.OnNICNoChanging(value);
					this.SendPropertyChanging();
					this._NICNo = value;
					this.SendPropertyChanged("NICNo");
					this.OnNICNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeCatagory", DbType="VarChar(100)")]
		public string EmployeeCatagory
		{
			get
			{
				return this._EmployeeCatagory;
			}
			set
			{
				if ((this._EmployeeCatagory != value))
				{
					this.OnEmployeeCatagoryChanging(value);
					this.SendPropertyChanging();
					this._EmployeeCatagory = value;
					this.SendPropertyChanged("EmployeeCatagory");
					this.OnEmployeeCatagoryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeGrade", DbType="VarChar(100)")]
		public string EmployeeGrade
		{
			get
			{
				return this._EmployeeGrade;
			}
			set
			{
				if ((this._EmployeeGrade != value))
				{
					this.OnEmployeeGradeChanging(value);
					this.SendPropertyChanging();
					this._EmployeeGrade = value;
					this.SendPropertyChanged("EmployeeGrade");
					this.OnEmployeeGradeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NoPayCalculataionDate", DbType="Int")]
		public System.Nullable<int> NoPayCalculataionDate
		{
			get
			{
				return this._NoPayCalculataionDate;
			}
			set
			{
				if ((this._NoPayCalculataionDate != value))
				{
					this.OnNoPayCalculataionDateChanging(value);
					this.SendPropertyChanging();
					this._NoPayCalculataionDate = value;
					this.SendPropertyChanged("NoPayCalculataionDate");
					this.OnNoPayCalculataionDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PieceRateEntitled", DbType="Bit")]
		public System.Nullable<bool> PieceRateEntitled
		{
			get
			{
				return this._PieceRateEntitled;
			}
			set
			{
				if ((this._PieceRateEntitled != value))
				{
					this.OnPieceRateEntitledChanging(value);
					this.SendPropertyChanging();
					this._PieceRateEntitled = value;
					this.SendPropertyChanged("PieceRateEntitled");
					this.OnPieceRateEntitledChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EPFEntitled", DbType="Bit")]
		public System.Nullable<bool> EPFEntitled
		{
			get
			{
				return this._EPFEntitled;
			}
			set
			{
				if ((this._EPFEntitled != value))
				{
					this.OnEPFEntitledChanging(value);
					this.SendPropertyChanging();
					this._EPFEntitled = value;
					this.SendPropertyChanged("EPFEntitled");
					this.OnEPFEntitledChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DesignationID", DbType="Int")]
		public System.Nullable<int> DesignationID
		{
			get
			{
				return this._DesignationID;
			}
			set
			{
				if ((this._DesignationID != value))
				{
					if (this._Designation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDesignationIDChanging(value);
					this.SendPropertyChanging();
					this._DesignationID = value;
					this.SendPropertyChanged("DesignationID");
					this.OnDesignationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubDepartmentID", DbType="Int")]
		public System.Nullable<int> SubDepartmentID
		{
			get
			{
				return this._SubDepartmentID;
			}
			set
			{
				if ((this._SubDepartmentID != value))
				{
					if (this._SubDepartment.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSubDepartmentIDChanging(value);
					this.SendPropertyChanging();
					this._SubDepartmentID = value;
					this.SendPropertyChanged("SubDepartmentID");
					this.OnSubDepartmentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="Int")]
		public System.Nullable<int> CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					if (this._UserAccount.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="Int")]
		public System.Nullable<int> ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					if (this._UserAccount1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_WorkOtherLocation", Storage="_WorkOtherLocations", ThisKey="EmployeeID", OtherKey="EmployeeID")]
		public EntitySet<WorkOtherLocation> WorkOtherLocations
		{
			get
			{
				return this._WorkOtherLocations;
			}
			set
			{
				this._WorkOtherLocations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_BroughtForward", Storage="_BroughtForwards", ThisKey="EmployeeID", OtherKey="EmployeeID")]
		public EntitySet<BroughtForward> BroughtForwards
		{
			get
			{
				return this._BroughtForwards;
			}
			set
			{
				this._BroughtForwards.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_CreatedSalaryDetail", Storage="_CreatedSalaryDetails", ThisKey="EmployeeID", OtherKey="EmployeeID")]
		public EntitySet<CreatedSalaryDetail> CreatedSalaryDetails
		{
			get
			{
				return this._CreatedSalaryDetails;
			}
			set
			{
				this._CreatedSalaryDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_DayOffRecord", Storage="_DayOffRecords", ThisKey="EmployeeID", OtherKey="EmployeeID")]
		public EntitySet<DayOffRecord> DayOffRecords
		{
			get
			{
				return this._DayOffRecords;
			}
			set
			{
				this._DayOffRecords.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_EmployeeAttendance", Storage="_EmployeeAttendances", ThisKey="EmployeeID", OtherKey="EmployeeID")]
		public EntitySet<EmployeeAttendance> EmployeeAttendances
		{
			get
			{
				return this._EmployeeAttendances;
			}
			set
			{
				this._EmployeeAttendances.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_FixedIncentive", Storage="_FixedIncentives", ThisKey="EmployeeID", OtherKey="EmployeeID")]
		public EntitySet<FixedIncentive> FixedIncentives
		{
			get
			{
				return this._FixedIncentives;
			}
			set
			{
				this._FixedIncentives.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_GrantedLeave", Storage="_GrantedLeaves", ThisKey="EmployeeID", OtherKey="EmployeeID")]
		public EntitySet<GrantedLeave> GrantedLeaves
		{
			get
			{
				return this._GrantedLeaves;
			}
			set
			{
				this._GrantedLeaves.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_OtherDeduction", Storage="_OtherDeductions", ThisKey="EmployeeID", OtherKey="EmployeeID")]
		public EntitySet<OtherDeduction> OtherDeductions
		{
			get
			{
				return this._OtherDeductions;
			}
			set
			{
				this._OtherDeductions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_OverTime", Storage="_OverTimes", ThisKey="EmployeeID", OtherKey="EmployeeID")]
		public EntitySet<OverTime> OverTimes
		{
			get
			{
				return this._OverTimes;
			}
			set
			{
				this._OverTimes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_PersonalLeaveRecord", Storage="_PersonalLeaveRecords", ThisKey="EmployeeID", OtherKey="EmployeeID")]
		public EntitySet<PersonalLeaveRecord> PersonalLeaveRecords
		{
			get
			{
				return this._PersonalLeaveRecords;
			}
			set
			{
				this._PersonalLeaveRecords.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_SalaryAdvance", Storage="_SalaryAdvances", ThisKey="EmployeeID", OtherKey="EmployeeID")]
		public EntitySet<SalaryAdvance> SalaryAdvances
		{
			get
			{
				return this._SalaryAdvances;
			}
			set
			{
				this._SalaryAdvances.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_SalaryAdvance1", Storage="_SalaryAdvances1", ThisKey="EmployeeID", OtherKey="ApprovedBy")]
		public EntitySet<SalaryAdvance> SalaryAdvances1
		{
			get
			{
				return this._SalaryAdvances1;
			}
			set
			{
				this._SalaryAdvances1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_SalaryLoan", Storage="_SalaryLoans", ThisKey="EmployeeID", OtherKey="EmployeeID")]
		public EntitySet<SalaryLoan> SalaryLoans
		{
			get
			{
				return this._SalaryLoans;
			}
			set
			{
				this._SalaryLoans.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_SalaryLoan1", Storage="_SalaryLoans1", ThisKey="EmployeeID", OtherKey="ApprovedBy")]
		public EntitySet<SalaryLoan> SalaryLoans1
		{
			get
			{
				return this._SalaryLoans1;
			}
			set
			{
				this._SalaryLoans1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_VariableIncentive", Storage="_VariableIncentives", ThisKey="EmployeeID", OtherKey="EmployeeID")]
		public EntitySet<VariableIncentive> VariableIncentives
		{
			get
			{
				return this._VariableIncentives;
			}
			set
			{
				this._VariableIncentives.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Designation_Employee", Storage="_Designation", ThisKey="DesignationID", OtherKey="DesignationID", IsForeignKey=true)]
		public Designation Designation
		{
			get
			{
				return this._Designation.Entity;
			}
			set
			{
				Designation previousValue = this._Designation.Entity;
				if (((previousValue != value) 
							|| (this._Designation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Designation.Entity = null;
						previousValue.Employees.Remove(this);
					}
					this._Designation.Entity = value;
					if ((value != null))
					{
						value.Employees.Add(this);
						this._DesignationID = value.DesignationID;
					}
					else
					{
						this._DesignationID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Designation");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EmployeeSalaryDetail_Employee", Storage="_EmployeeSalaryDetail", ThisKey="EmployeeID", OtherKey="EmployeeID", IsForeignKey=true)]
		public EmployeeSalaryDetail EmployeeSalaryDetail
		{
			get
			{
				return this._EmployeeSalaryDetail.Entity;
			}
			set
			{
				EmployeeSalaryDetail previousValue = this._EmployeeSalaryDetail.Entity;
				if (((previousValue != value) 
							|| (this._EmployeeSalaryDetail.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EmployeeSalaryDetail.Entity = null;
						previousValue.Employee = null;
					}
					this._EmployeeSalaryDetail.Entity = value;
					if ((value != null))
					{
						value.Employee = this;
						this._EmployeeID = value.EmployeeID;
					}
					else
					{
						this._EmployeeID = default(int);
					}
					this.SendPropertyChanged("EmployeeSalaryDetail");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SubDepartment_Employee", Storage="_SubDepartment", ThisKey="SubDepartmentID", OtherKey="SubDepartmentID", IsForeignKey=true)]
		public SubDepartment SubDepartment
		{
			get
			{
				return this._SubDepartment.Entity;
			}
			set
			{
				SubDepartment previousValue = this._SubDepartment.Entity;
				if (((previousValue != value) 
							|| (this._SubDepartment.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SubDepartment.Entity = null;
						previousValue.Employees.Remove(this);
					}
					this._SubDepartment.Entity = value;
					if ((value != null))
					{
						value.Employees.Add(this);
						this._SubDepartmentID = value.SubDepartmentID;
					}
					else
					{
						this._SubDepartmentID = default(Nullable<int>);
					}
					this.SendPropertyChanged("SubDepartment");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserAccount_Employee", Storage="_UserAccount", ThisKey="CreatedBy", OtherKey="UserID", IsForeignKey=true)]
		public UserAccount UserAccount
		{
			get
			{
				return this._UserAccount.Entity;
			}
			set
			{
				UserAccount previousValue = this._UserAccount.Entity;
				if (((previousValue != value) 
							|| (this._UserAccount.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserAccount.Entity = null;
						previousValue.Employees.Remove(this);
					}
					this._UserAccount.Entity = value;
					if ((value != null))
					{
						value.Employees.Add(this);
						this._CreatedBy = value.UserID;
					}
					else
					{
						this._CreatedBy = default(Nullable<int>);
					}
					this.SendPropertyChanged("UserAccount");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserAccount_Employee1", Storage="_UserAccount1", ThisKey="ModifiedBy", OtherKey="UserID", IsForeignKey=true)]
		public UserAccount UserAccount1
		{
			get
			{
				return this._UserAccount1.Entity;
			}
			set
			{
				UserAccount previousValue = this._UserAccount1.Entity;
				if (((previousValue != value) 
							|| (this._UserAccount1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserAccount1.Entity = null;
						previousValue.Employees1.Remove(this);
					}
					this._UserAccount1.Entity = value;
					if ((value != null))
					{
						value.Employees1.Add(this);
						this._ModifiedBy = value.UserID;
					}
					else
					{
						this._ModifiedBy = default(Nullable<int>);
					}
					this.SendPropertyChanged("UserAccount1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_WorkOtherLocations(WorkOtherLocation entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_WorkOtherLocations(WorkOtherLocation entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
		
		private void attach_BroughtForwards(BroughtForward entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_BroughtForwards(BroughtForward entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
		
		private void attach_CreatedSalaryDetails(CreatedSalaryDetail entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_CreatedSalaryDetails(CreatedSalaryDetail entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
		
		private void attach_DayOffRecords(DayOffRecord entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_DayOffRecords(DayOffRecord entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
		
		private void attach_EmployeeAttendances(EmployeeAttendance entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_EmployeeAttendances(EmployeeAttendance entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
		
		private void attach_FixedIncentives(FixedIncentive entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_FixedIncentives(FixedIncentive entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
		
		private void attach_GrantedLeaves(GrantedLeave entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_GrantedLeaves(GrantedLeave entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
		
		private void attach_OtherDeductions(OtherDeduction entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_OtherDeductions(OtherDeduction entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
		
		private void attach_OverTimes(OverTime entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_OverTimes(OverTime entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
		
		private void attach_PersonalLeaveRecords(PersonalLeaveRecord entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_PersonalLeaveRecords(PersonalLeaveRecord entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
		
		private void attach_SalaryAdvances(SalaryAdvance entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_SalaryAdvances(SalaryAdvance entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
		
		private void attach_SalaryAdvances1(SalaryAdvance entity)
		{
			this.SendPropertyChanging();
			entity.Employee1 = this;
		}
		
		private void detach_SalaryAdvances1(SalaryAdvance entity)
		{
			this.SendPropertyChanging();
			entity.Employee1 = null;
		}
		
		private void attach_SalaryLoans(SalaryLoan entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_SalaryLoans(SalaryLoan entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
		
		private void attach_SalaryLoans1(SalaryLoan entity)
		{
			this.SendPropertyChanging();
			entity.Employee1 = this;
		}
		
		private void detach_SalaryLoans1(SalaryLoan entity)
		{
			this.SendPropertyChanging();
			entity.Employee1 = null;
		}
		
		private void attach_VariableIncentives(VariableIncentive entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_VariableIncentives(VariableIncentive entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EmployeeAttendance")]
	public partial class EmployeeAttendance : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Nullable<int> _EmployeeID;
		
		private System.Nullable<System.DateTime> _DateAndTime;
		
		private string _Mode;
		
		private int _AttendanceID;
		
		private System.Nullable<int> _CreatedBy;
		
		private System.Nullable<System.DateTime> _CreatedDate;
		
		private System.Nullable<int> _ModifiedBy;
		
		private System.Nullable<System.DateTime> _ModifiedDate;
		
		private EntityRef<Employee> _Employee;
		
		private EntityRef<UserAccount> _UserAccount;
		
		private EntityRef<UserAccount> _UserAccount1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEmployeeIDChanging(System.Nullable<int> value);
    partial void OnEmployeeIDChanged();
    partial void OnDateAndTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnDateAndTimeChanged();
    partial void OnModeChanging(string value);
    partial void OnModeChanged();
    partial void OnAttendanceIDChanging(int value);
    partial void OnAttendanceIDChanged();
    partial void OnCreatedByChanging(System.Nullable<int> value);
    partial void OnCreatedByChanged();
    partial void OnCreatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedDateChanged();
    partial void OnModifiedByChanging(System.Nullable<int> value);
    partial void OnModifiedByChanged();
    partial void OnModifiedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedDateChanged();
    #endregion
		
		public EmployeeAttendance()
		{
			this._Employee = default(EntityRef<Employee>);
			this._UserAccount = default(EntityRef<UserAccount>);
			this._UserAccount1 = default(EntityRef<UserAccount>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeID", DbType="Int")]
		public System.Nullable<int> EmployeeID
		{
			get
			{
				return this._EmployeeID;
			}
			set
			{
				if ((this._EmployeeID != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmployeeIDChanging(value);
					this.SendPropertyChanging();
					this._EmployeeID = value;
					this.SendPropertyChanged("EmployeeID");
					this.OnEmployeeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateAndTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateAndTime
		{
			get
			{
				return this._DateAndTime;
			}
			set
			{
				if ((this._DateAndTime != value))
				{
					this.OnDateAndTimeChanging(value);
					this.SendPropertyChanging();
					this._DateAndTime = value;
					this.SendPropertyChanged("DateAndTime");
					this.OnDateAndTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Mode", DbType="VarChar(100)")]
		public string Mode
		{
			get
			{
				return this._Mode;
			}
			set
			{
				if ((this._Mode != value))
				{
					this.OnModeChanging(value);
					this.SendPropertyChanging();
					this._Mode = value;
					this.SendPropertyChanged("Mode");
					this.OnModeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AttendanceID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AttendanceID
		{
			get
			{
				return this._AttendanceID;
			}
			set
			{
				if ((this._AttendanceID != value))
				{
					this.OnAttendanceIDChanging(value);
					this.SendPropertyChanging();
					this._AttendanceID = value;
					this.SendPropertyChanged("AttendanceID");
					this.OnAttendanceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="Int")]
		public System.Nullable<int> CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					if (this._UserAccount.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="Int")]
		public System.Nullable<int> ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					if (this._UserAccount1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_EmployeeAttendance", Storage="_Employee", ThisKey="EmployeeID", OtherKey="EmployeeID", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.EmployeeAttendances.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.EmployeeAttendances.Add(this);
						this._EmployeeID = value.EmployeeID;
					}
					else
					{
						this._EmployeeID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserAccount_EmployeeAttendance", Storage="_UserAccount", ThisKey="CreatedBy", OtherKey="UserID", IsForeignKey=true)]
		public UserAccount UserAccount
		{
			get
			{
				return this._UserAccount.Entity;
			}
			set
			{
				UserAccount previousValue = this._UserAccount.Entity;
				if (((previousValue != value) 
							|| (this._UserAccount.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserAccount.Entity = null;
						previousValue.EmployeeAttendances.Remove(this);
					}
					this._UserAccount.Entity = value;
					if ((value != null))
					{
						value.EmployeeAttendances.Add(this);
						this._CreatedBy = value.UserID;
					}
					else
					{
						this._CreatedBy = default(Nullable<int>);
					}
					this.SendPropertyChanged("UserAccount");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserAccount_EmployeeAttendance1", Storage="_UserAccount1", ThisKey="ModifiedBy", OtherKey="UserID", IsForeignKey=true)]
		public UserAccount UserAccount1
		{
			get
			{
				return this._UserAccount1.Entity;
			}
			set
			{
				UserAccount previousValue = this._UserAccount1.Entity;
				if (((previousValue != value) 
							|| (this._UserAccount1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserAccount1.Entity = null;
						previousValue.EmployeeAttendances1.Remove(this);
					}
					this._UserAccount1.Entity = value;
					if ((value != null))
					{
						value.EmployeeAttendances1.Add(this);
						this._ModifiedBy = value.UserID;
					}
					else
					{
						this._ModifiedBy = default(Nullable<int>);
					}
					this.SendPropertyChanged("UserAccount1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EmployeeSalaryDetail")]
	public partial class EmployeeSalaryDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EmployeeID;
		
		private System.Nullable<double> _BudgetAllowance;
		
		private System.Nullable<double> _DayWagesAmount;
		
		private System.Nullable<double> _TotalValueForEPF;
		
		private System.Nullable<double> _BasicSalary;
		
		private System.Nullable<int> _CreatedBy;
		
		private System.Nullable<System.DateTime> _CreatedDate;
		
		private System.Nullable<int> _ModifiedBy;
		
		private System.Nullable<System.DateTime> _ModifiedDate;
		
		private EntityRef<Employee> _Employee;
		
		private EntityRef<UserAccount> _UserAccount;
		
		private EntityRef<UserAccount> _UserAccount1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEmployeeIDChanging(int value);
    partial void OnEmployeeIDChanged();
    partial void OnBudgetAllowanceChanging(System.Nullable<double> value);
    partial void OnBudgetAllowanceChanged();
    partial void OnDayWagesAmountChanging(System.Nullable<double> value);
    partial void OnDayWagesAmountChanged();
    partial void OnTotalValueForEPFChanging(System.Nullable<double> value);
    partial void OnTotalValueForEPFChanged();
    partial void OnBasicSalaryChanging(System.Nullable<double> value);
    partial void OnBasicSalaryChanged();
    partial void OnCreatedByChanging(System.Nullable<int> value);
    partial void OnCreatedByChanged();
    partial void OnCreatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedDateChanged();
    partial void OnModifiedByChanging(System.Nullable<int> value);
    partial void OnModifiedByChanged();
    partial void OnModifiedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedDateChanged();
    #endregion
		
		public EmployeeSalaryDetail()
		{
			this._Employee = default(EntityRef<Employee>);
			this._UserAccount = default(EntityRef<UserAccount>);
			this._UserAccount1 = default(EntityRef<UserAccount>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int EmployeeID
		{
			get
			{
				return this._EmployeeID;
			}
			set
			{
				if ((this._EmployeeID != value))
				{
					this.OnEmployeeIDChanging(value);
					this.SendPropertyChanging();
					this._EmployeeID = value;
					this.SendPropertyChanged("EmployeeID");
					this.OnEmployeeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BudgetAllowance", DbType="Float")]
		public System.Nullable<double> BudgetAllowance
		{
			get
			{
				return this._BudgetAllowance;
			}
			set
			{
				if ((this._BudgetAllowance != value))
				{
					this.OnBudgetAllowanceChanging(value);
					this.SendPropertyChanging();
					this._BudgetAllowance = value;
					this.SendPropertyChanged("BudgetAllowance");
					this.OnBudgetAllowanceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DayWagesAmount", DbType="Float")]
		public System.Nullable<double> DayWagesAmount
		{
			get
			{
				return this._DayWagesAmount;
			}
			set
			{
				if ((this._DayWagesAmount != value))
				{
					this.OnDayWagesAmountChanging(value);
					this.SendPropertyChanging();
					this._DayWagesAmount = value;
					this.SendPropertyChanged("DayWagesAmount");
					this.OnDayWagesAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalValueForEPF", DbType="Float")]
		public System.Nullable<double> TotalValueForEPF
		{
			get
			{
				return this._TotalValueForEPF;
			}
			set
			{
				if ((this._TotalValueForEPF != value))
				{
					this.OnTotalValueForEPFChanging(value);
					this.SendPropertyChanging();
					this._TotalValueForEPF = value;
					this.SendPropertyChanged("TotalValueForEPF");
					this.OnTotalValueForEPFChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BasicSalary", DbType="Float")]
		public System.Nullable<double> BasicSalary
		{
			get
			{
				return this._BasicSalary;
			}
			set
			{
				if ((this._BasicSalary != value))
				{
					this.OnBasicSalaryChanging(value);
					this.SendPropertyChanging();
					this._BasicSalary = value;
					this.SendPropertyChanged("BasicSalary");
					this.OnBasicSalaryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="Int")]
		public System.Nullable<int> CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					if (this._UserAccount.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="Int")]
		public System.Nullable<int> ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					if (this._UserAccount1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EmployeeSalaryDetail_Employee", Storage="_Employee", ThisKey="EmployeeID", OtherKey="EmployeeID", IsUnique=true, IsForeignKey=false)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.EmployeeSalaryDetail = null;
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.EmployeeSalaryDetail = this;
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserAccount_EmployeeSalaryDetail", Storage="_UserAccount", ThisKey="CreatedBy", OtherKey="UserID", IsForeignKey=true)]
		public UserAccount UserAccount
		{
			get
			{
				return this._UserAccount.Entity;
			}
			set
			{
				UserAccount previousValue = this._UserAccount.Entity;
				if (((previousValue != value) 
							|| (this._UserAccount.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserAccount.Entity = null;
						previousValue.EmployeeSalaryDetails.Remove(this);
					}
					this._UserAccount.Entity = value;
					if ((value != null))
					{
						value.EmployeeSalaryDetails.Add(this);
						this._CreatedBy = value.UserID;
					}
					else
					{
						this._CreatedBy = default(Nullable<int>);
					}
					this.SendPropertyChanged("UserAccount");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserAccount_EmployeeSalaryDetail1", Storage="_UserAccount1", ThisKey="ModifiedBy", OtherKey="UserID", IsForeignKey=true)]
		public UserAccount UserAccount1
		{
			get
			{
				return this._UserAccount1.Entity;
			}
			set
			{
				UserAccount previousValue = this._UserAccount1.Entity;
				if (((previousValue != value) 
							|| (this._UserAccount1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserAccount1.Entity = null;
						previousValue.EmployeeSalaryDetails1.Remove(this);
					}
					this._UserAccount1.Entity = value;
					if ((value != null))
					{
						value.EmployeeSalaryDetails1.Add(this);
						this._ModifiedBy = value.UserID;
					}
					else
					{
						this._ModifiedBy = default(Nullable<int>);
					}
					this.SendPropertyChanged("UserAccount1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FixedIncentive")]
	public partial class FixedIncentive : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IncentiveID;
		
		private System.Nullable<int> _EmployeeID;
		
		private string _IncentiveType;
		
		private System.Nullable<double> _InventiveValue;
		
		private System.Nullable<int> _CreatedBy;
		
		private System.Nullable<System.DateTime> _CreatedDate;
		
		private System.Nullable<int> _ModifiedBy;
		
		private System.Nullable<System.DateTime> _ModifiedDate;
		
		private EntityRef<Employee> _Employee;
		
		private EntityRef<UserAccount> _UserAccount;
		
		private EntityRef<UserAccount> _UserAccount1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIncentiveIDChanging(int value);
    partial void OnIncentiveIDChanged();
    partial void OnEmployeeIDChanging(System.Nullable<int> value);
    partial void OnEmployeeIDChanged();
    partial void OnIncentiveTypeChanging(string value);
    partial void OnIncentiveTypeChanged();
    partial void OnInventiveValueChanging(System.Nullable<double> value);
    partial void OnInventiveValueChanged();
    partial void OnCreatedByChanging(System.Nullable<int> value);
    partial void OnCreatedByChanged();
    partial void OnCreatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedDateChanged();
    partial void OnModifiedByChanging(System.Nullable<int> value);
    partial void OnModifiedByChanged();
    partial void OnModifiedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedDateChanged();
    #endregion
		
		public FixedIncentive()
		{
			this._Employee = default(EntityRef<Employee>);
			this._UserAccount = default(EntityRef<UserAccount>);
			this._UserAccount1 = default(EntityRef<UserAccount>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IncentiveID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IncentiveID
		{
			get
			{
				return this._IncentiveID;
			}
			set
			{
				if ((this._IncentiveID != value))
				{
					this.OnIncentiveIDChanging(value);
					this.SendPropertyChanging();
					this._IncentiveID = value;
					this.SendPropertyChanged("IncentiveID");
					this.OnIncentiveIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeID", DbType="Int")]
		public System.Nullable<int> EmployeeID
		{
			get
			{
				return this._EmployeeID;
			}
			set
			{
				if ((this._EmployeeID != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmployeeIDChanging(value);
					this.SendPropertyChanging();
					this._EmployeeID = value;
					this.SendPropertyChanged("EmployeeID");
					this.OnEmployeeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IncentiveType", DbType="VarChar(500)")]
		public string IncentiveType
		{
			get
			{
				return this._IncentiveType;
			}
			set
			{
				if ((this._IncentiveType != value))
				{
					this.OnIncentiveTypeChanging(value);
					this.SendPropertyChanging();
					this._IncentiveType = value;
					this.SendPropertyChanged("IncentiveType");
					this.OnIncentiveTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InventiveValue", DbType="Float")]
		public System.Nullable<double> InventiveValue
		{
			get
			{
				return this._InventiveValue;
			}
			set
			{
				if ((this._InventiveValue != value))
				{
					this.OnInventiveValueChanging(value);
					this.SendPropertyChanging();
					this._InventiveValue = value;
					this.SendPropertyChanged("InventiveValue");
					this.OnInventiveValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="Int")]
		public System.Nullable<int> CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					if (this._UserAccount.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="Int")]
		public System.Nullable<int> ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					if (this._UserAccount1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_FixedIncentive", Storage="_Employee", ThisKey="EmployeeID", OtherKey="EmployeeID", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.FixedIncentives.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.FixedIncentives.Add(this);
						this._EmployeeID = value.EmployeeID;
					}
					else
					{
						this._EmployeeID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserAccount_FixedIncentive", Storage="_UserAccount", ThisKey="CreatedBy", OtherKey="UserID", IsForeignKey=true)]
		public UserAccount UserAccount
		{
			get
			{
				return this._UserAccount.Entity;
			}
			set
			{
				UserAccount previousValue = this._UserAccount.Entity;
				if (((previousValue != value) 
							|| (this._UserAccount.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserAccount.Entity = null;
						previousValue.FixedIncentives.Remove(this);
					}
					this._UserAccount.Entity = value;
					if ((value != null))
					{
						value.FixedIncentives.Add(this);
						this._CreatedBy = value.UserID;
					}
					else
					{
						this._CreatedBy = default(Nullable<int>);
					}
					this.SendPropertyChanged("UserAccount");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserAccount_FixedIncentive1", Storage="_UserAccount1", ThisKey="ModifiedBy", OtherKey="UserID", IsForeignKey=true)]
		public UserAccount UserAccount1
		{
			get
			{
				return this._UserAccount1.Entity;
			}
			set
			{
				UserAccount previousValue = this._UserAccount1.Entity;
				if (((previousValue != value) 
							|| (this._UserAccount1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserAccount1.Entity = null;
						previousValue.FixedIncentives1.Remove(this);
					}
					this._UserAccount1.Entity = value;
					if ((value != null))
					{
						value.FixedIncentives1.Add(this);
						this._ModifiedBy = value.UserID;
					}
					else
					{
						this._ModifiedBy = default(Nullable<int>);
					}
					this.SendPropertyChanged("UserAccount1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.GrantedLeaves")]
	public partial class GrantedLeave : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _LeavesID;
		
		private int _EmployeeID;
		
		private System.Nullable<int> _Annual;
		
		private System.Nullable<int> _Casual;
		
		private System.Nullable<int> _CreatedBy;
		
		private System.Nullable<System.DateTime> _CreatedDate;
		
		private System.Nullable<int> _ModifiedBy;
		
		private System.Nullable<System.DateTime> _ModifiedDate;
		
		private EntityRef<Employee> _Employee;
		
		private EntityRef<UserAccount> _UserAccount;
		
		private EntityRef<UserAccount> _UserAccount1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLeavesIDChanging(int value);
    partial void OnLeavesIDChanged();
    partial void OnEmployeeIDChanging(int value);
    partial void OnEmployeeIDChanged();
    partial void OnAnnualChanging(System.Nullable<int> value);
    partial void OnAnnualChanged();
    partial void OnCasualChanging(System.Nullable<int> value);
    partial void OnCasualChanged();
    partial void OnCreatedByChanging(System.Nullable<int> value);
    partial void OnCreatedByChanged();
    partial void OnCreatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedDateChanged();
    partial void OnModifiedByChanging(System.Nullable<int> value);
    partial void OnModifiedByChanged();
    partial void OnModifiedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedDateChanged();
    #endregion
		
		public GrantedLeave()
		{
			this._Employee = default(EntityRef<Employee>);
			this._UserAccount = default(EntityRef<UserAccount>);
			this._UserAccount1 = default(EntityRef<UserAccount>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LeavesID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int LeavesID
		{
			get
			{
				return this._LeavesID;
			}
			set
			{
				if ((this._LeavesID != value))
				{
					this.OnLeavesIDChanging(value);
					this.SendPropertyChanging();
					this._LeavesID = value;
					this.SendPropertyChanged("LeavesID");
					this.OnLeavesIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeID", DbType="Int NOT NULL")]
		public int EmployeeID
		{
			get
			{
				return this._EmployeeID;
			}
			set
			{
				if ((this._EmployeeID != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmployeeIDChanging(value);
					this.SendPropertyChanging();
					this._EmployeeID = value;
					this.SendPropertyChanged("EmployeeID");
					this.OnEmployeeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Annual", DbType="Int")]
		public System.Nullable<int> Annual
		{
			get
			{
				return this._Annual;
			}
			set
			{
				if ((this._Annual != value))
				{
					this.OnAnnualChanging(value);
					this.SendPropertyChanging();
					this._Annual = value;
					this.SendPropertyChanged("Annual");
					this.OnAnnualChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Casual", DbType="Int")]
		public System.Nullable<int> Casual
		{
			get
			{
				return this._Casual;
			}
			set
			{
				if ((this._Casual != value))
				{
					this.OnCasualChanging(value);
					this.SendPropertyChanging();
					this._Casual = value;
					this.SendPropertyChanged("Casual");
					this.OnCasualChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="Int")]
		public System.Nullable<int> CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					if (this._UserAccount.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="Int")]
		public System.Nullable<int> ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					if (this._UserAccount1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_GrantedLeave", Storage="_Employee", ThisKey="EmployeeID", OtherKey="EmployeeID", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.GrantedLeaves.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.GrantedLeaves.Add(this);
						this._EmployeeID = value.EmployeeID;
					}
					else
					{
						this._EmployeeID = default(int);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserAccount_GrantedLeave", Storage="_UserAccount", ThisKey="CreatedBy", OtherKey="UserID", IsForeignKey=true)]
		public UserAccount UserAccount
		{
			get
			{
				return this._UserAccount.Entity;
			}
			set
			{
				UserAccount previousValue = this._UserAccount.Entity;
				if (((previousValue != value) 
							|| (this._UserAccount.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserAccount.Entity = null;
						previousValue.GrantedLeaves.Remove(this);
					}
					this._UserAccount.Entity = value;
					if ((value != null))
					{
						value.GrantedLeaves.Add(this);
						this._CreatedBy = value.UserID;
					}
					else
					{
						this._CreatedBy = default(Nullable<int>);
					}
					this.SendPropertyChanged("UserAccount");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserAccount_GrantedLeave1", Storage="_UserAccount1", ThisKey="ModifiedBy", OtherKey="UserID", IsForeignKey=true)]
		public UserAccount UserAccount1
		{
			get
			{
				return this._UserAccount1.Entity;
			}
			set
			{
				UserAccount previousValue = this._UserAccount1.Entity;
				if (((previousValue != value) 
							|| (this._UserAccount1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserAccount1.Entity = null;
						previousValue.GrantedLeaves1.Remove(this);
					}
					this._UserAccount1.Entity = value;
					if ((value != null))
					{
						value.GrantedLeaves1.Add(this);
						this._ModifiedBy = value.UserID;
					}
					else
					{
						this._ModifiedBy = default(Nullable<int>);
					}
					this.SendPropertyChanged("UserAccount1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OtherDeduction")]
	public partial class OtherDeduction : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DeductionID;
		
		private System.Nullable<int> _EmployeeID;
		
		private System.Nullable<int> _Year;
		
		private System.Nullable<int> _Month;
		
		private System.Nullable<double> _MedicalInsurance;
		
		private System.Nullable<double> _BankLoan;
		
		private System.Nullable<double> _Payee;
		
		private System.Nullable<double> _StampDuty;
		
		private System.Nullable<double> _Meals;
		
		private System.Nullable<double> _WelfareShop;
		
		private System.Nullable<double> _WelfareContribution;
		
		private System.Nullable<double> _WelfareLoan;
		
		private System.Nullable<double> _BankSaving;
		
		private System.Nullable<double> _Misc;
		
		private System.Nullable<double> _Other;
		
		private System.Nullable<int> _CreatedBy;
		
		private System.Nullable<System.DateTime> _CreatedDate;
		
		private System.Nullable<int> _ModifiedBy;
		
		private System.Nullable<System.DateTime> _ModifiedDate;
		
		private EntityRef<Employee> _Employee;
		
		private EntityRef<UserAccount> _UserAccount;
		
		private EntityRef<UserAccount> _UserAccount1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDeductionIDChanging(int value);
    partial void OnDeductionIDChanged();
    partial void OnEmployeeIDChanging(System.Nullable<int> value);
    partial void OnEmployeeIDChanged();
    partial void OnYearChanging(System.Nullable<int> value);
    partial void OnYearChanged();
    partial void OnMonthChanging(System.Nullable<int> value);
    partial void OnMonthChanged();
    partial void OnMedicalInsuranceChanging(System.Nullable<double> value);
    partial void OnMedicalInsuranceChanged();
    partial void OnBankLoanChanging(System.Nullable<double> value);
    partial void OnBankLoanChanged();
    partial void OnPayeeChanging(System.Nullable<double> value);
    partial void OnPayeeChanged();
    partial void OnStampDutyChanging(System.Nullable<double> value);
    partial void OnStampDutyChanged();
    partial void OnMealsChanging(System.Nullable<double> value);
    partial void OnMealsChanged();
    partial void OnWelfareShopChanging(System.Nullable<double> value);
    partial void OnWelfareShopChanged();
    partial void OnWelfareContributionChanging(System.Nullable<double> value);
    partial void OnWelfareContributionChanged();
    partial void OnWelfareLoanChanging(System.Nullable<double> value);
    partial void OnWelfareLoanChanged();
    partial void OnBankSavingChanging(System.Nullable<double> value);
    partial void OnBankSavingChanged();
    partial void OnMiscChanging(System.Nullable<double> value);
    partial void OnMiscChanged();
    partial void OnOtherChanging(System.Nullable<double> value);
    partial void OnOtherChanged();
    partial void OnCreatedByChanging(System.Nullable<int> value);
    partial void OnCreatedByChanged();
    partial void OnCreatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedDateChanged();
    partial void OnModifiedByChanging(System.Nullable<int> value);
    partial void OnModifiedByChanged();
    partial void OnModifiedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedDateChanged();
    #endregion
		
		public OtherDeduction()
		{
			this._Employee = default(EntityRef<Employee>);
			this._UserAccount = default(EntityRef<UserAccount>);
			this._UserAccount1 = default(EntityRef<UserAccount>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeductionID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int DeductionID
		{
			get
			{
				return this._DeductionID;
			}
			set
			{
				if ((this._DeductionID != value))
				{
					this.OnDeductionIDChanging(value);
					this.SendPropertyChanging();
					this._DeductionID = value;
					this.SendPropertyChanged("DeductionID");
					this.OnDeductionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeID", DbType="Int")]
		public System.Nullable<int> EmployeeID
		{
			get
			{
				return this._EmployeeID;
			}
			set
			{
				if ((this._EmployeeID != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmployeeIDChanging(value);
					this.SendPropertyChanging();
					this._EmployeeID = value;
					this.SendPropertyChanged("EmployeeID");
					this.OnEmployeeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Year", DbType="Int")]
		public System.Nullable<int> Year
		{
			get
			{
				return this._Year;
			}
			set
			{
				if ((this._Year != value))
				{
					this.OnYearChanging(value);
					this.SendPropertyChanging();
					this._Year = value;
					this.SendPropertyChanged("Year");
					this.OnYearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Month", DbType="Int")]
		public System.Nullable<int> Month
		{
			get
			{
				return this._Month;
			}
			set
			{
				if ((this._Month != value))
				{
					this.OnMonthChanging(value);
					this.SendPropertyChanging();
					this._Month = value;
					this.SendPropertyChanged("Month");
					this.OnMonthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MedicalInsurance", DbType="Float")]
		public System.Nullable<double> MedicalInsurance
		{
			get
			{
				return this._MedicalInsurance;
			}
			set
			{
				if ((this._MedicalInsurance != value))
				{
					this.OnMedicalInsuranceChanging(value);
					this.SendPropertyChanging();
					this._MedicalInsurance = value;
					this.SendPropertyChanged("MedicalInsurance");
					this.OnMedicalInsuranceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BankLoan", DbType="Float")]
		public System.Nullable<double> BankLoan
		{
			get
			{
				return this._BankLoan;
			}
			set
			{
				if ((this._BankLoan != value))
				{
					this.OnBankLoanChanging(value);
					this.SendPropertyChanging();
					this._BankLoan = value;
					this.SendPropertyChanged("BankLoan");
					this.OnBankLoanChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Payee", DbType="Float")]
		public System.Nullable<double> Payee
		{
			get
			{
				return this._Payee;
			}
			set
			{
				if ((this._Payee != value))
				{
					this.OnPayeeChanging(value);
					this.SendPropertyChanging();
					this._Payee = value;
					this.SendPropertyChanged("Payee");
					this.OnPayeeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StampDuty", DbType="Float")]
		public System.Nullable<double> StampDuty
		{
			get
			{
				return this._StampDuty;
			}
			set
			{
				if ((this._StampDuty != value))
				{
					this.OnStampDutyChanging(value);
					this.SendPropertyChanging();
					this._StampDuty = value;
					this.SendPropertyChanged("StampDuty");
					this.OnStampDutyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Meals", DbType="Float")]
		public System.Nullable<double> Meals
		{
			get
			{
				return this._Meals;
			}
			set
			{
				if ((this._Meals != value))
				{
					this.OnMealsChanging(value);
					this.SendPropertyChanging();
					this._Meals = value;
					this.SendPropertyChanged("Meals");
					this.OnMealsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WelfareShop", DbType="Float")]
		public System.Nullable<double> WelfareShop
		{
			get
			{
				return this._WelfareShop;
			}
			set
			{
				if ((this._WelfareShop != value))
				{
					this.OnWelfareShopChanging(value);
					this.SendPropertyChanging();
					this._WelfareShop = value;
					this.SendPropertyChanged("WelfareShop");
					this.OnWelfareShopChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WelfareContribution", DbType="Float")]
		public System.Nullable<double> WelfareContribution
		{
			get
			{
				return this._WelfareContribution;
			}
			set
			{
				if ((this._WelfareContribution != value))
				{
					this.OnWelfareContributionChanging(value);
					this.SendPropertyChanging();
					this._WelfareContribution = value;
					this.SendPropertyChanged("WelfareContribution");
					this.OnWelfareContributionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WelfareLoan", DbType="Float")]
		public System.Nullable<double> WelfareLoan
		{
			get
			{
				return this._WelfareLoan;
			}
			set
			{
				if ((this._WelfareLoan != value))
				{
					this.OnWelfareLoanChanging(value);
					this.SendPropertyChanging();
					this._WelfareLoan = value;
					this.SendPropertyChanged("WelfareLoan");
					this.OnWelfareLoanChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BankSaving", DbType="Float")]
		public System.Nullable<double> BankSaving
		{
			get
			{
				return this._BankSaving;
			}
			set
			{
				if ((this._BankSaving != value))
				{
					this.OnBankSavingChanging(value);
					this.SendPropertyChanging();
					this._BankSaving = value;
					this.SendPropertyChanged("BankSaving");
					this.OnBankSavingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Misc", DbType="Float")]
		public System.Nullable<double> Misc
		{
			get
			{
				return this._Misc;
			}
			set
			{
				if ((this._Misc != value))
				{
					this.OnMiscChanging(value);
					this.SendPropertyChanging();
					this._Misc = value;
					this.SendPropertyChanged("Misc");
					this.OnMiscChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Other", DbType="Float")]
		public System.Nullable<double> Other
		{
			get
			{
				return this._Other;
			}
			set
			{
				if ((this._Other != value))
				{
					this.OnOtherChanging(value);
					this.SendPropertyChanging();
					this._Other = value;
					this.SendPropertyChanged("Other");
					this.OnOtherChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="Int")]
		public System.Nullable<int> CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					if (this._UserAccount.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="Int")]
		public System.Nullable<int> ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					if (this._UserAccount1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_OtherDeduction", Storage="_Employee", ThisKey="EmployeeID", OtherKey="EmployeeID", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.OtherDeductions.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.OtherDeductions.Add(this);
						this._EmployeeID = value.EmployeeID;
					}
					else
					{
						this._EmployeeID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserAccount_OtherDeduction", Storage="_UserAccount", ThisKey="CreatedBy", OtherKey="UserID", IsForeignKey=true)]
		public UserAccount UserAccount
		{
			get
			{
				return this._UserAccount.Entity;
			}
			set
			{
				UserAccount previousValue = this._UserAccount.Entity;
				if (((previousValue != value) 
							|| (this._UserAccount.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserAccount.Entity = null;
						previousValue.OtherDeductions.Remove(this);
					}
					this._UserAccount.Entity = value;
					if ((value != null))
					{
						value.OtherDeductions.Add(this);
						this._CreatedBy = value.UserID;
					}
					else
					{
						this._CreatedBy = default(Nullable<int>);
					}
					this.SendPropertyChanged("UserAccount");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserAccount_OtherDeduction1", Storage="_UserAccount1", ThisKey="ModifiedBy", OtherKey="UserID", IsForeignKey=true)]
		public UserAccount UserAccount1
		{
			get
			{
				return this._UserAccount1.Entity;
			}
			set
			{
				UserAccount previousValue = this._UserAccount1.Entity;
				if (((previousValue != value) 
							|| (this._UserAccount1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserAccount1.Entity = null;
						previousValue.OtherDeductions1.Remove(this);
					}
					this._UserAccount1.Entity = value;
					if ((value != null))
					{
						value.OtherDeductions1.Add(this);
						this._ModifiedBy = value.UserID;
					}
					else
					{
						this._ModifiedBy = default(Nullable<int>);
					}
					this.SendPropertyChanged("UserAccount1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OTRate")]
	public partial class OTRate : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _OTRID;
		
		private System.Nullable<int> _OTType;
		
		private System.Nullable<double> _OTRate1;
		
		private System.Nullable<int> _SubDepartmentID;
		
		private System.Nullable<int> _CreatedBy;
		
		private System.Nullable<System.DateTime> _CreatedDate;
		
		private System.Nullable<int> _ModifiedBy;
		
		private System.Nullable<System.DateTime> _ModifiedDate;
		
		private EntityRef<SubDepartment> _SubDepartment;
		
		private EntityRef<UserAccount> _UserAccount;
		
		private EntityRef<UserAccount> _UserAccount1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOTRIDChanging(int value);
    partial void OnOTRIDChanged();
    partial void OnOTTypeChanging(System.Nullable<int> value);
    partial void OnOTTypeChanged();
    partial void OnOTRate1Changing(System.Nullable<double> value);
    partial void OnOTRate1Changed();
    partial void OnSubDepartmentIDChanging(System.Nullable<int> value);
    partial void OnSubDepartmentIDChanged();
    partial void OnCreatedByChanging(System.Nullable<int> value);
    partial void OnCreatedByChanged();
    partial void OnCreatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedDateChanged();
    partial void OnModifiedByChanging(System.Nullable<int> value);
    partial void OnModifiedByChanged();
    partial void OnModifiedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedDateChanged();
    #endregion
		
		public OTRate()
		{
			this._SubDepartment = default(EntityRef<SubDepartment>);
			this._UserAccount = default(EntityRef<UserAccount>);
			this._UserAccount1 = default(EntityRef<UserAccount>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OTRID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int OTRID
		{
			get
			{
				return this._OTRID;
			}
			set
			{
				if ((this._OTRID != value))
				{
					this.OnOTRIDChanging(value);
					this.SendPropertyChanging();
					this._OTRID = value;
					this.SendPropertyChanged("OTRID");
					this.OnOTRIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OTType", DbType="Int")]
		public System.Nullable<int> OTType
		{
			get
			{
				return this._OTType;
			}
			set
			{
				if ((this._OTType != value))
				{
					this.OnOTTypeChanging(value);
					this.SendPropertyChanging();
					this._OTType = value;
					this.SendPropertyChanged("OTType");
					this.OnOTTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="OTRate", Storage="_OTRate1", DbType="Float")]
		public System.Nullable<double> OTRate1
		{
			get
			{
				return this._OTRate1;
			}
			set
			{
				if ((this._OTRate1 != value))
				{
					this.OnOTRate1Changing(value);
					this.SendPropertyChanging();
					this._OTRate1 = value;
					this.SendPropertyChanged("OTRate1");
					this.OnOTRate1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubDepartmentID", DbType="Int")]
		public System.Nullable<int> SubDepartmentID
		{
			get
			{
				return this._SubDepartmentID;
			}
			set
			{
				if ((this._SubDepartmentID != value))
				{
					if (this._SubDepartment.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSubDepartmentIDChanging(value);
					this.SendPropertyChanging();
					this._SubDepartmentID = value;
					this.SendPropertyChanged("SubDepartmentID");
					this.OnSubDepartmentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="Int")]
		public System.Nullable<int> CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					if (this._UserAccount.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="Int")]
		public System.Nullable<int> ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					if (this._UserAccount1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SubDepartment_OTRate", Storage="_SubDepartment", ThisKey="SubDepartmentID", OtherKey="SubDepartmentID", IsForeignKey=true)]
		public SubDepartment SubDepartment
		{
			get
			{
				return this._SubDepartment.Entity;
			}
			set
			{
				SubDepartment previousValue = this._SubDepartment.Entity;
				if (((previousValue != value) 
							|| (this._SubDepartment.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SubDepartment.Entity = null;
						previousValue.OTRates.Remove(this);
					}
					this._SubDepartment.Entity = value;
					if ((value != null))
					{
						value.OTRates.Add(this);
						this._SubDepartmentID = value.SubDepartmentID;
					}
					else
					{
						this._SubDepartmentID = default(Nullable<int>);
					}
					this.SendPropertyChanged("SubDepartment");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserAccount_OTRate", Storage="_UserAccount", ThisKey="CreatedBy", OtherKey="UserID", IsForeignKey=true)]
		public UserAccount UserAccount
		{
			get
			{
				return this._UserAccount.Entity;
			}
			set
			{
				UserAccount previousValue = this._UserAccount.Entity;
				if (((previousValue != value) 
							|| (this._UserAccount.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserAccount.Entity = null;
						previousValue.OTRates.Remove(this);
					}
					this._UserAccount.Entity = value;
					if ((value != null))
					{
						value.OTRates.Add(this);
						this._CreatedBy = value.UserID;
					}
					else
					{
						this._CreatedBy = default(Nullable<int>);
					}
					this.SendPropertyChanged("UserAccount");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserAccount_OTRate1", Storage="_UserAccount1", ThisKey="ModifiedBy", OtherKey="UserID", IsForeignKey=true)]
		public UserAccount UserAccount1
		{
			get
			{
				return this._UserAccount1.Entity;
			}
			set
			{
				UserAccount previousValue = this._UserAccount1.Entity;
				if (((previousValue != value) 
							|| (this._UserAccount1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserAccount1.Entity = null;
						previousValue.OTRates1.Remove(this);
					}
					this._UserAccount1.Entity = value;
					if ((value != null))
					{
						value.OTRates1.Add(this);
						this._ModifiedBy = value.UserID;
					}
					else
					{
						this._ModifiedBy = default(Nullable<int>);
					}
					this.SendPropertyChanged("UserAccount1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OverTime")]
	public partial class OverTime : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _OverTimeID;
		
		private int _EmployeeID;
		
		private System.Nullable<System.DateTime> _OverTimeDate;
		
		private System.Nullable<System.DateTime> _OverTImeFrom;
		
		private System.Nullable<System.DateTime> _OverTimeTo;
		
		private System.Nullable<int> _OverTimeCategory;
		
		private System.Nullable<int> _OverTimeApprovedDept;
		
		private System.Nullable<int> _OverTImeAuthorizedDept;
		
		private string _OverTimeReason;
		
		private System.Nullable<int> _CreatedBy;
		
		private System.Nullable<System.DateTime> _CreatedDate;
		
		private System.Nullable<int> _ModifiedBy;
		
		private System.Nullable<System.DateTime> _ModifiedDate;
		
		private EntityRef<Employee> _Employee;
		
		private EntityRef<UserAccount> _UserAccount;
		
		private EntityRef<UserAccount> _UserAccount1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOverTimeIDChanging(int value);
    partial void OnOverTimeIDChanged();
    partial void OnEmployeeIDChanging(int value);
    partial void OnEmployeeIDChanged();
    partial void OnOverTimeDateChanging(System.Nullable<System.DateTime> value);
    partial void OnOverTimeDateChanged();
    partial void OnOverTImeFromChanging(System.Nullable<System.DateTime> value);
    partial void OnOverTImeFromChanged();
    partial void OnOverTimeToChanging(System.Nullable<System.DateTime> value);
    partial void OnOverTimeToChanged();
    partial void OnOverTimeCategoryChanging(System.Nullable<int> value);
    partial void OnOverTimeCategoryChanged();
    partial void OnOverTimeApprovedDeptChanging(System.Nullable<int> value);
    partial void OnOverTimeApprovedDeptChanged();
    partial void OnOverTImeAuthorizedDeptChanging(System.Nullable<int> value);
    partial void OnOverTImeAuthorizedDeptChanged();
    partial void OnOverTimeReasonChanging(string value);
    partial void OnOverTimeReasonChanged();
    partial void OnCreatedByChanging(System.Nullable<int> value);
    partial void OnCreatedByChanged();
    partial void OnCreatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedDateChanged();
    partial void OnModifiedByChanging(System.Nullable<int> value);
    partial void OnModifiedByChanged();
    partial void OnModifiedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedDateChanged();
    #endregion
		
		public OverTime()
		{
			this._Employee = default(EntityRef<Employee>);
			this._UserAccount = default(EntityRef<UserAccount>);
			this._UserAccount1 = default(EntityRef<UserAccount>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OverTimeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int OverTimeID
		{
			get
			{
				return this._OverTimeID;
			}
			set
			{
				if ((this._OverTimeID != value))
				{
					this.OnOverTimeIDChanging(value);
					this.SendPropertyChanging();
					this._OverTimeID = value;
					this.SendPropertyChanged("OverTimeID");
					this.OnOverTimeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeID", DbType="Int NOT NULL")]
		public int EmployeeID
		{
			get
			{
				return this._EmployeeID;
			}
			set
			{
				if ((this._EmployeeID != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmployeeIDChanging(value);
					this.SendPropertyChanging();
					this._EmployeeID = value;
					this.SendPropertyChanged("EmployeeID");
					this.OnEmployeeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OverTimeDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> OverTimeDate
		{
			get
			{
				return this._OverTimeDate;
			}
			set
			{
				if ((this._OverTimeDate != value))
				{
					this.OnOverTimeDateChanging(value);
					this.SendPropertyChanging();
					this._OverTimeDate = value;
					this.SendPropertyChanged("OverTimeDate");
					this.OnOverTimeDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OverTImeFrom", DbType="DateTime")]
		public System.Nullable<System.DateTime> OverTImeFrom
		{
			get
			{
				return this._OverTImeFrom;
			}
			set
			{
				if ((this._OverTImeFrom != value))
				{
					this.OnOverTImeFromChanging(value);
					this.SendPropertyChanging();
					this._OverTImeFrom = value;
					this.SendPropertyChanged("OverTImeFrom");
					this.OnOverTImeFromChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OverTimeTo", DbType="DateTime")]
		public System.Nullable<System.DateTime> OverTimeTo
		{
			get
			{
				return this._OverTimeTo;
			}
			set
			{
				if ((this._OverTimeTo != value))
				{
					this.OnOverTimeToChanging(value);
					this.SendPropertyChanging();
					this._OverTimeTo = value;
					this.SendPropertyChanged("OverTimeTo");
					this.OnOverTimeToChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OverTimeCategory", DbType="Int")]
		public System.Nullable<int> OverTimeCategory
		{
			get
			{
				return this._OverTimeCategory;
			}
			set
			{
				if ((this._OverTimeCategory != value))
				{
					this.OnOverTimeCategoryChanging(value);
					this.SendPropertyChanging();
					this._OverTimeCategory = value;
					this.SendPropertyChanged("OverTimeCategory");
					this.OnOverTimeCategoryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OverTimeApprovedDept", DbType="Int")]
		public System.Nullable<int> OverTimeApprovedDept
		{
			get
			{
				return this._OverTimeApprovedDept;
			}
			set
			{
				if ((this._OverTimeApprovedDept != value))
				{
					this.OnOverTimeApprovedDeptChanging(value);
					this.SendPropertyChanging();
					this._OverTimeApprovedDept = value;
					this.SendPropertyChanged("OverTimeApprovedDept");
					this.OnOverTimeApprovedDeptChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OverTImeAuthorizedDept", DbType="Int")]
		public System.Nullable<int> OverTImeAuthorizedDept
		{
			get
			{
				return this._OverTImeAuthorizedDept;
			}
			set
			{
				if ((this._OverTImeAuthorizedDept != value))
				{
					this.OnOverTImeAuthorizedDeptChanging(value);
					this.SendPropertyChanging();
					this._OverTImeAuthorizedDept = value;
					this.SendPropertyChanged("OverTImeAuthorizedDept");
					this.OnOverTImeAuthorizedDeptChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OverTimeReason", DbType="VarChar(500)")]
		public string OverTimeReason
		{
			get
			{
				return this._OverTimeReason;
			}
			set
			{
				if ((this._OverTimeReason != value))
				{
					this.OnOverTimeReasonChanging(value);
					this.SendPropertyChanging();
					this._OverTimeReason = value;
					this.SendPropertyChanged("OverTimeReason");
					this.OnOverTimeReasonChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="Int")]
		public System.Nullable<int> CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					if (this._UserAccount.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="Int")]
		public System.Nullable<int> ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					if (this._UserAccount1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_OverTime", Storage="_Employee", ThisKey="EmployeeID", OtherKey="EmployeeID", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.OverTimes.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.OverTimes.Add(this);
						this._EmployeeID = value.EmployeeID;
					}
					else
					{
						this._EmployeeID = default(int);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserAccount_OverTime", Storage="_UserAccount", ThisKey="CreatedBy", OtherKey="UserID", IsForeignKey=true)]
		public UserAccount UserAccount
		{
			get
			{
				return this._UserAccount.Entity;
			}
			set
			{
				UserAccount previousValue = this._UserAccount.Entity;
				if (((previousValue != value) 
							|| (this._UserAccount.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserAccount.Entity = null;
						previousValue.OverTimes.Remove(this);
					}
					this._UserAccount.Entity = value;
					if ((value != null))
					{
						value.OverTimes.Add(this);
						this._CreatedBy = value.UserID;
					}
					else
					{
						this._CreatedBy = default(Nullable<int>);
					}
					this.SendPropertyChanged("UserAccount");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserAccount_OverTime1", Storage="_UserAccount1", ThisKey="ModifiedBy", OtherKey="UserID", IsForeignKey=true)]
		public UserAccount UserAccount1
		{
			get
			{
				return this._UserAccount1.Entity;
			}
			set
			{
				UserAccount previousValue = this._UserAccount1.Entity;
				if (((previousValue != value) 
							|| (this._UserAccount1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserAccount1.Entity = null;
						previousValue.OverTimes1.Remove(this);
					}
					this._UserAccount1.Entity = value;
					if ((value != null))
					{
						value.OverTimes1.Add(this);
						this._ModifiedBy = value.UserID;
					}
					else
					{
						this._ModifiedBy = default(Nullable<int>);
					}
					this.SendPropertyChanged("UserAccount1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PersonalLeaveRecord")]
	public partial class PersonalLeaveRecord : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PersonalLeaveID;
		
		private int _EmployeeID;
		
		private System.Nullable<System.DateTime> _LeaveDate;
		
		private string _LeaveReason;
		
		private System.Nullable<bool> _IsNoPay;
		
		private string _LeaveType;
		
		private System.Nullable<double> _LeaveValue;
		
		private System.Nullable<int> _LeaveAuthorizedDept;
		
		private System.Nullable<int> _LeaveApprovedDept;
		
		private System.Nullable<int> _CreatedBy;
		
		private System.Nullable<System.DateTime> _CreatedDate;
		
		private System.Nullable<int> _ModifiedBy;
		
		private System.Nullable<System.DateTime> _ModifiedDate;
		
		private EntityRef<Employee> _Employee;
		
		private EntityRef<UserAccount> _UserAccount;
		
		private EntityRef<UserAccount> _UserAccount1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPersonalLeaveIDChanging(int value);
    partial void OnPersonalLeaveIDChanged();
    partial void OnEmployeeIDChanging(int value);
    partial void OnEmployeeIDChanged();
    partial void OnLeaveDateChanging(System.Nullable<System.DateTime> value);
    partial void OnLeaveDateChanged();
    partial void OnLeaveReasonChanging(string value);
    partial void OnLeaveReasonChanged();
    partial void OnIsNoPayChanging(System.Nullable<bool> value);
    partial void OnIsNoPayChanged();
    partial void OnLeaveTypeChanging(string value);
    partial void OnLeaveTypeChanged();
    partial void OnLeaveValueChanging(System.Nullable<double> value);
    partial void OnLeaveValueChanged();
    partial void OnLeaveAuthorizedDeptChanging(System.Nullable<int> value);
    partial void OnLeaveAuthorizedDeptChanged();
    partial void OnLeaveApprovedDeptChanging(System.Nullable<int> value);
    partial void OnLeaveApprovedDeptChanged();
    partial void OnCreatedByChanging(System.Nullable<int> value);
    partial void OnCreatedByChanged();
    partial void OnCreatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedDateChanged();
    partial void OnModifiedByChanging(System.Nullable<int> value);
    partial void OnModifiedByChanged();
    partial void OnModifiedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedDateChanged();
    #endregion
		
		public PersonalLeaveRecord()
		{
			this._Employee = default(EntityRef<Employee>);
			this._UserAccount = default(EntityRef<UserAccount>);
			this._UserAccount1 = default(EntityRef<UserAccount>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersonalLeaveID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int PersonalLeaveID
		{
			get
			{
				return this._PersonalLeaveID;
			}
			set
			{
				if ((this._PersonalLeaveID != value))
				{
					this.OnPersonalLeaveIDChanging(value);
					this.SendPropertyChanging();
					this._PersonalLeaveID = value;
					this.SendPropertyChanged("PersonalLeaveID");
					this.OnPersonalLeaveIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeID", DbType="Int NOT NULL")]
		public int EmployeeID
		{
			get
			{
				return this._EmployeeID;
			}
			set
			{
				if ((this._EmployeeID != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmployeeIDChanging(value);
					this.SendPropertyChanging();
					this._EmployeeID = value;
					this.SendPropertyChanged("EmployeeID");
					this.OnEmployeeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LeaveDate", DbType="Date")]
		public System.Nullable<System.DateTime> LeaveDate
		{
			get
			{
				return this._LeaveDate;
			}
			set
			{
				if ((this._LeaveDate != value))
				{
					this.OnLeaveDateChanging(value);
					this.SendPropertyChanging();
					this._LeaveDate = value;
					this.SendPropertyChanged("LeaveDate");
					this.OnLeaveDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LeaveReason", DbType="VarChar(500)")]
		public string LeaveReason
		{
			get
			{
				return this._LeaveReason;
			}
			set
			{
				if ((this._LeaveReason != value))
				{
					this.OnLeaveReasonChanging(value);
					this.SendPropertyChanging();
					this._LeaveReason = value;
					this.SendPropertyChanged("LeaveReason");
					this.OnLeaveReasonChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsNoPay", DbType="Bit")]
		public System.Nullable<bool> IsNoPay
		{
			get
			{
				return this._IsNoPay;
			}
			set
			{
				if ((this._IsNoPay != value))
				{
					this.OnIsNoPayChanging(value);
					this.SendPropertyChanging();
					this._IsNoPay = value;
					this.SendPropertyChanged("IsNoPay");
					this.OnIsNoPayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LeaveType", DbType="VarChar(100)")]
		public string LeaveType
		{
			get
			{
				return this._LeaveType;
			}
			set
			{
				if ((this._LeaveType != value))
				{
					this.OnLeaveTypeChanging(value);
					this.SendPropertyChanging();
					this._LeaveType = value;
					this.SendPropertyChanged("LeaveType");
					this.OnLeaveTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LeaveValue", DbType="Float")]
		public System.Nullable<double> LeaveValue
		{
			get
			{
				return this._LeaveValue;
			}
			set
			{
				if ((this._LeaveValue != value))
				{
					this.OnLeaveValueChanging(value);
					this.SendPropertyChanging();
					this._LeaveValue = value;
					this.SendPropertyChanged("LeaveValue");
					this.OnLeaveValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LeaveAuthorizedDept", DbType="Int")]
		public System.Nullable<int> LeaveAuthorizedDept
		{
			get
			{
				return this._LeaveAuthorizedDept;
			}
			set
			{
				if ((this._LeaveAuthorizedDept != value))
				{
					this.OnLeaveAuthorizedDeptChanging(value);
					this.SendPropertyChanging();
					this._LeaveAuthorizedDept = value;
					this.SendPropertyChanged("LeaveAuthorizedDept");
					this.OnLeaveAuthorizedDeptChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LeaveApprovedDept", DbType="Int")]
		public System.Nullable<int> LeaveApprovedDept
		{
			get
			{
				return this._LeaveApprovedDept;
			}
			set
			{
				if ((this._LeaveApprovedDept != value))
				{
					this.OnLeaveApprovedDeptChanging(value);
					this.SendPropertyChanging();
					this._LeaveApprovedDept = value;
					this.SendPropertyChanged("LeaveApprovedDept");
					this.OnLeaveApprovedDeptChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="Int")]
		public System.Nullable<int> CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					if (this._UserAccount.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="Int")]
		public System.Nullable<int> ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					if (this._UserAccount1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_PersonalLeaveRecord", Storage="_Employee", ThisKey="EmployeeID", OtherKey="EmployeeID", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.PersonalLeaveRecords.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.PersonalLeaveRecords.Add(this);
						this._EmployeeID = value.EmployeeID;
					}
					else
					{
						this._EmployeeID = default(int);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserAccount_PersonalLeaveRecord", Storage="_UserAccount", ThisKey="CreatedBy", OtherKey="UserID", IsForeignKey=true)]
		public UserAccount UserAccount
		{
			get
			{
				return this._UserAccount.Entity;
			}
			set
			{
				UserAccount previousValue = this._UserAccount.Entity;
				if (((previousValue != value) 
							|| (this._UserAccount.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserAccount.Entity = null;
						previousValue.PersonalLeaveRecords.Remove(this);
					}
					this._UserAccount.Entity = value;
					if ((value != null))
					{
						value.PersonalLeaveRecords.Add(this);
						this._CreatedBy = value.UserID;
					}
					else
					{
						this._CreatedBy = default(Nullable<int>);
					}
					this.SendPropertyChanged("UserAccount");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserAccount_PersonalLeaveRecord1", Storage="_UserAccount1", ThisKey="ModifiedBy", OtherKey="UserID", IsForeignKey=true)]
		public UserAccount UserAccount1
		{
			get
			{
				return this._UserAccount1.Entity;
			}
			set
			{
				UserAccount previousValue = this._UserAccount1.Entity;
				if (((previousValue != value) 
							|| (this._UserAccount1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserAccount1.Entity = null;
						previousValue.PersonalLeaveRecords1.Remove(this);
					}
					this._UserAccount1.Entity = value;
					if ((value != null))
					{
						value.PersonalLeaveRecords1.Add(this);
						this._ModifiedBy = value.UserID;
					}
					else
					{
						this._ModifiedBy = default(Nullable<int>);
					}
					this.SendPropertyChanged("UserAccount1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SalaryAdvance")]
	public partial class SalaryAdvance : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SalaryAdvanceID;
		
		private System.Nullable<System.DateTime> _RequestedDate;
		
		private System.Nullable<int> _EmployeeID;
		
		private System.Nullable<double> _TotalFromEPFSalary;
		
		private System.Nullable<double> _DayWagesAmount;
		
		private System.Nullable<double> _FixedIncentiveAmount;
		
		private System.Nullable<double> _VariableIncentiveAmount;
		
		private System.Nullable<int> _ApprovedBy;
		
		private System.Nullable<System.DateTime> _ApprovedDate;
		
		private System.Nullable<bool> _IsApproved;
		
		private System.Nullable<int> _CreatedBy;
		
		private System.Nullable<System.DateTime> _CreatedDate;
		
		private System.Nullable<int> _ModifiedBy;
		
		private System.Nullable<System.DateTime> _ModifiedDate;
		
		private EntityRef<Employee> _Employee;
		
		private EntityRef<Employee> _Employee1;
		
		private EntityRef<UserAccount> _UserAccount;
		
		private EntityRef<UserAccount> _UserAccount1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSalaryAdvanceIDChanging(int value);
    partial void OnSalaryAdvanceIDChanged();
    partial void OnRequestedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnRequestedDateChanged();
    partial void OnEmployeeIDChanging(System.Nullable<int> value);
    partial void OnEmployeeIDChanged();
    partial void OnTotalFromEPFSalaryChanging(System.Nullable<double> value);
    partial void OnTotalFromEPFSalaryChanged();
    partial void OnDayWagesAmountChanging(System.Nullable<double> value);
    partial void OnDayWagesAmountChanged();
    partial void OnFixedIncentiveAmountChanging(System.Nullable<double> value);
    partial void OnFixedIncentiveAmountChanged();
    partial void OnVariableIncentiveAmountChanging(System.Nullable<double> value);
    partial void OnVariableIncentiveAmountChanged();
    partial void OnApprovedByChanging(System.Nullable<int> value);
    partial void OnApprovedByChanged();
    partial void OnApprovedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnApprovedDateChanged();
    partial void OnIsApprovedChanging(System.Nullable<bool> value);
    partial void OnIsApprovedChanged();
    partial void OnCreatedByChanging(System.Nullable<int> value);
    partial void OnCreatedByChanged();
    partial void OnCreatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedDateChanged();
    partial void OnModifiedByChanging(System.Nullable<int> value);
    partial void OnModifiedByChanged();
    partial void OnModifiedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedDateChanged();
    #endregion
		
		public SalaryAdvance()
		{
			this._Employee = default(EntityRef<Employee>);
			this._Employee1 = default(EntityRef<Employee>);
			this._UserAccount = default(EntityRef<UserAccount>);
			this._UserAccount1 = default(EntityRef<UserAccount>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SalaryAdvanceID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SalaryAdvanceID
		{
			get
			{
				return this._SalaryAdvanceID;
			}
			set
			{
				if ((this._SalaryAdvanceID != value))
				{
					this.OnSalaryAdvanceIDChanging(value);
					this.SendPropertyChanging();
					this._SalaryAdvanceID = value;
					this.SendPropertyChanged("SalaryAdvanceID");
					this.OnSalaryAdvanceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RequestedDate", DbType="Date")]
		public System.Nullable<System.DateTime> RequestedDate
		{
			get
			{
				return this._RequestedDate;
			}
			set
			{
				if ((this._RequestedDate != value))
				{
					this.OnRequestedDateChanging(value);
					this.SendPropertyChanging();
					this._RequestedDate = value;
					this.SendPropertyChanged("RequestedDate");
					this.OnRequestedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeID", DbType="Int")]
		public System.Nullable<int> EmployeeID
		{
			get
			{
				return this._EmployeeID;
			}
			set
			{
				if ((this._EmployeeID != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmployeeIDChanging(value);
					this.SendPropertyChanging();
					this._EmployeeID = value;
					this.SendPropertyChanged("EmployeeID");
					this.OnEmployeeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalFromEPFSalary", DbType="Float")]
		public System.Nullable<double> TotalFromEPFSalary
		{
			get
			{
				return this._TotalFromEPFSalary;
			}
			set
			{
				if ((this._TotalFromEPFSalary != value))
				{
					this.OnTotalFromEPFSalaryChanging(value);
					this.SendPropertyChanging();
					this._TotalFromEPFSalary = value;
					this.SendPropertyChanged("TotalFromEPFSalary");
					this.OnTotalFromEPFSalaryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DayWagesAmount", DbType="Float")]
		public System.Nullable<double> DayWagesAmount
		{
			get
			{
				return this._DayWagesAmount;
			}
			set
			{
				if ((this._DayWagesAmount != value))
				{
					this.OnDayWagesAmountChanging(value);
					this.SendPropertyChanging();
					this._DayWagesAmount = value;
					this.SendPropertyChanged("DayWagesAmount");
					this.OnDayWagesAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FixedIncentiveAmount", DbType="Float")]
		public System.Nullable<double> FixedIncentiveAmount
		{
			get
			{
				return this._FixedIncentiveAmount;
			}
			set
			{
				if ((this._FixedIncentiveAmount != value))
				{
					this.OnFixedIncentiveAmountChanging(value);
					this.SendPropertyChanging();
					this._FixedIncentiveAmount = value;
					this.SendPropertyChanged("FixedIncentiveAmount");
					this.OnFixedIncentiveAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VariableIncentiveAmount", DbType="Float")]
		public System.Nullable<double> VariableIncentiveAmount
		{
			get
			{
				return this._VariableIncentiveAmount;
			}
			set
			{
				if ((this._VariableIncentiveAmount != value))
				{
					this.OnVariableIncentiveAmountChanging(value);
					this.SendPropertyChanging();
					this._VariableIncentiveAmount = value;
					this.SendPropertyChanged("VariableIncentiveAmount");
					this.OnVariableIncentiveAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApprovedBy", DbType="Int")]
		public System.Nullable<int> ApprovedBy
		{
			get
			{
				return this._ApprovedBy;
			}
			set
			{
				if ((this._ApprovedBy != value))
				{
					if (this._Employee1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnApprovedByChanging(value);
					this.SendPropertyChanging();
					this._ApprovedBy = value;
					this.SendPropertyChanged("ApprovedBy");
					this.OnApprovedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApprovedDate", DbType="Date")]
		public System.Nullable<System.DateTime> ApprovedDate
		{
			get
			{
				return this._ApprovedDate;
			}
			set
			{
				if ((this._ApprovedDate != value))
				{
					this.OnApprovedDateChanging(value);
					this.SendPropertyChanging();
					this._ApprovedDate = value;
					this.SendPropertyChanged("ApprovedDate");
					this.OnApprovedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsApproved", DbType="Bit")]
		public System.Nullable<bool> IsApproved
		{
			get
			{
				return this._IsApproved;
			}
			set
			{
				if ((this._IsApproved != value))
				{
					this.OnIsApprovedChanging(value);
					this.SendPropertyChanging();
					this._IsApproved = value;
					this.SendPropertyChanged("IsApproved");
					this.OnIsApprovedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="Int")]
		public System.Nullable<int> CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					if (this._UserAccount.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="Int")]
		public System.Nullable<int> ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					if (this._UserAccount1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_SalaryAdvance", Storage="_Employee", ThisKey="EmployeeID", OtherKey="EmployeeID", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.SalaryAdvances.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.SalaryAdvances.Add(this);
						this._EmployeeID = value.EmployeeID;
					}
					else
					{
						this._EmployeeID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_SalaryAdvance1", Storage="_Employee1", ThisKey="ApprovedBy", OtherKey="EmployeeID", IsForeignKey=true)]
		public Employee Employee1
		{
			get
			{
				return this._Employee1.Entity;
			}
			set
			{
				Employee previousValue = this._Employee1.Entity;
				if (((previousValue != value) 
							|| (this._Employee1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee1.Entity = null;
						previousValue.SalaryAdvances1.Remove(this);
					}
					this._Employee1.Entity = value;
					if ((value != null))
					{
						value.SalaryAdvances1.Add(this);
						this._ApprovedBy = value.EmployeeID;
					}
					else
					{
						this._ApprovedBy = default(Nullable<int>);
					}
					this.SendPropertyChanged("Employee1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserAccount_SalaryAdvance", Storage="_UserAccount", ThisKey="CreatedBy", OtherKey="UserID", IsForeignKey=true)]
		public UserAccount UserAccount
		{
			get
			{
				return this._UserAccount.Entity;
			}
			set
			{
				UserAccount previousValue = this._UserAccount.Entity;
				if (((previousValue != value) 
							|| (this._UserAccount.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserAccount.Entity = null;
						previousValue.SalaryAdvances.Remove(this);
					}
					this._UserAccount.Entity = value;
					if ((value != null))
					{
						value.SalaryAdvances.Add(this);
						this._CreatedBy = value.UserID;
					}
					else
					{
						this._CreatedBy = default(Nullable<int>);
					}
					this.SendPropertyChanged("UserAccount");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserAccount_SalaryAdvance1", Storage="_UserAccount1", ThisKey="ModifiedBy", OtherKey="UserID", IsForeignKey=true)]
		public UserAccount UserAccount1
		{
			get
			{
				return this._UserAccount1.Entity;
			}
			set
			{
				UserAccount previousValue = this._UserAccount1.Entity;
				if (((previousValue != value) 
							|| (this._UserAccount1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserAccount1.Entity = null;
						previousValue.SalaryAdvances1.Remove(this);
					}
					this._UserAccount1.Entity = value;
					if ((value != null))
					{
						value.SalaryAdvances1.Add(this);
						this._ModifiedBy = value.UserID;
					}
					else
					{
						this._ModifiedBy = default(Nullable<int>);
					}
					this.SendPropertyChanged("UserAccount1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SalaryLoan")]
	public partial class SalaryLoan : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SalaryLoanID;
		
		private System.Nullable<int> _EmployeeID;
		
		private System.Nullable<double> _RequestedAmount;
		
		private System.Nullable<System.DateTime> _RequestedDate;
		
		private System.Nullable<int> _NoOfInstallment;
		
		private System.Nullable<double> _DayWagesAmount;
		
		private System.Nullable<double> _TotalFromEPFSalary;
		
		private System.Nullable<double> _FixedIncentiveAmount;
		
		private System.Nullable<int> _ApprovedBy;
		
		private System.Nullable<System.DateTime> _ApprovedDate;
		
		private System.Nullable<bool> _IsApproved;
		
		private System.Nullable<int> _CreatedBy;
		
		private System.Nullable<System.DateTime> _CreatedDate;
		
		private System.Nullable<int> _ModifiedBy;
		
		private System.Nullable<System.DateTime> _ModifiedDate;
		
		private EntitySet<SalaryLoanInstallment> _SalaryLoanInstallments;
		
		private EntityRef<Employee> _Employee;
		
		private EntityRef<Employee> _Employee1;
		
		private EntityRef<UserAccount> _UserAccount;
		
		private EntityRef<UserAccount> _UserAccount1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSalaryLoanIDChanging(int value);
    partial void OnSalaryLoanIDChanged();
    partial void OnEmployeeIDChanging(System.Nullable<int> value);
    partial void OnEmployeeIDChanged();
    partial void OnRequestedAmountChanging(System.Nullable<double> value);
    partial void OnRequestedAmountChanged();
    partial void OnRequestedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnRequestedDateChanged();
    partial void OnNoOfInstallmentChanging(System.Nullable<int> value);
    partial void OnNoOfInstallmentChanged();
    partial void OnDayWagesAmountChanging(System.Nullable<double> value);
    partial void OnDayWagesAmountChanged();
    partial void OnTotalFromEPFSalaryChanging(System.Nullable<double> value);
    partial void OnTotalFromEPFSalaryChanged();
    partial void OnFixedIncentiveAmountChanging(System.Nullable<double> value);
    partial void OnFixedIncentiveAmountChanged();
    partial void OnApprovedByChanging(System.Nullable<int> value);
    partial void OnApprovedByChanged();
    partial void OnApprovedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnApprovedDateChanged();
    partial void OnIsApprovedChanging(System.Nullable<bool> value);
    partial void OnIsApprovedChanged();
    partial void OnCreatedByChanging(System.Nullable<int> value);
    partial void OnCreatedByChanged();
    partial void OnCreatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedDateChanged();
    partial void OnModifiedByChanging(System.Nullable<int> value);
    partial void OnModifiedByChanged();
    partial void OnModifiedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedDateChanged();
    #endregion
		
		public SalaryLoan()
		{
			this._SalaryLoanInstallments = new EntitySet<SalaryLoanInstallment>(new Action<SalaryLoanInstallment>(this.attach_SalaryLoanInstallments), new Action<SalaryLoanInstallment>(this.detach_SalaryLoanInstallments));
			this._Employee = default(EntityRef<Employee>);
			this._Employee1 = default(EntityRef<Employee>);
			this._UserAccount = default(EntityRef<UserAccount>);
			this._UserAccount1 = default(EntityRef<UserAccount>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SalaryLoanID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SalaryLoanID
		{
			get
			{
				return this._SalaryLoanID;
			}
			set
			{
				if ((this._SalaryLoanID != value))
				{
					this.OnSalaryLoanIDChanging(value);
					this.SendPropertyChanging();
					this._SalaryLoanID = value;
					this.SendPropertyChanged("SalaryLoanID");
					this.OnSalaryLoanIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeID", DbType="Int")]
		public System.Nullable<int> EmployeeID
		{
			get
			{
				return this._EmployeeID;
			}
			set
			{
				if ((this._EmployeeID != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmployeeIDChanging(value);
					this.SendPropertyChanging();
					this._EmployeeID = value;
					this.SendPropertyChanged("EmployeeID");
					this.OnEmployeeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RequestedAmount", DbType="Float")]
		public System.Nullable<double> RequestedAmount
		{
			get
			{
				return this._RequestedAmount;
			}
			set
			{
				if ((this._RequestedAmount != value))
				{
					this.OnRequestedAmountChanging(value);
					this.SendPropertyChanging();
					this._RequestedAmount = value;
					this.SendPropertyChanged("RequestedAmount");
					this.OnRequestedAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RequestedDate", DbType="Date")]
		public System.Nullable<System.DateTime> RequestedDate
		{
			get
			{
				return this._RequestedDate;
			}
			set
			{
				if ((this._RequestedDate != value))
				{
					this.OnRequestedDateChanging(value);
					this.SendPropertyChanging();
					this._RequestedDate = value;
					this.SendPropertyChanged("RequestedDate");
					this.OnRequestedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NoOfInstallment", DbType="Int")]
		public System.Nullable<int> NoOfInstallment
		{
			get
			{
				return this._NoOfInstallment;
			}
			set
			{
				if ((this._NoOfInstallment != value))
				{
					this.OnNoOfInstallmentChanging(value);
					this.SendPropertyChanging();
					this._NoOfInstallment = value;
					this.SendPropertyChanged("NoOfInstallment");
					this.OnNoOfInstallmentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DayWagesAmount", DbType="Float")]
		public System.Nullable<double> DayWagesAmount
		{
			get
			{
				return this._DayWagesAmount;
			}
			set
			{
				if ((this._DayWagesAmount != value))
				{
					this.OnDayWagesAmountChanging(value);
					this.SendPropertyChanging();
					this._DayWagesAmount = value;
					this.SendPropertyChanged("DayWagesAmount");
					this.OnDayWagesAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalFromEPFSalary", DbType="Float")]
		public System.Nullable<double> TotalFromEPFSalary
		{
			get
			{
				return this._TotalFromEPFSalary;
			}
			set
			{
				if ((this._TotalFromEPFSalary != value))
				{
					this.OnTotalFromEPFSalaryChanging(value);
					this.SendPropertyChanging();
					this._TotalFromEPFSalary = value;
					this.SendPropertyChanged("TotalFromEPFSalary");
					this.OnTotalFromEPFSalaryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FixedIncentiveAmount", DbType="Float")]
		public System.Nullable<double> FixedIncentiveAmount
		{
			get
			{
				return this._FixedIncentiveAmount;
			}
			set
			{
				if ((this._FixedIncentiveAmount != value))
				{
					this.OnFixedIncentiveAmountChanging(value);
					this.SendPropertyChanging();
					this._FixedIncentiveAmount = value;
					this.SendPropertyChanged("FixedIncentiveAmount");
					this.OnFixedIncentiveAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApprovedBy", DbType="Int")]
		public System.Nullable<int> ApprovedBy
		{
			get
			{
				return this._ApprovedBy;
			}
			set
			{
				if ((this._ApprovedBy != value))
				{
					if (this._Employee1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnApprovedByChanging(value);
					this.SendPropertyChanging();
					this._ApprovedBy = value;
					this.SendPropertyChanged("ApprovedBy");
					this.OnApprovedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApprovedDate", DbType="Date")]
		public System.Nullable<System.DateTime> ApprovedDate
		{
			get
			{
				return this._ApprovedDate;
			}
			set
			{
				if ((this._ApprovedDate != value))
				{
					this.OnApprovedDateChanging(value);
					this.SendPropertyChanging();
					this._ApprovedDate = value;
					this.SendPropertyChanged("ApprovedDate");
					this.OnApprovedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsApproved", DbType="Bit")]
		public System.Nullable<bool> IsApproved
		{
			get
			{
				return this._IsApproved;
			}
			set
			{
				if ((this._IsApproved != value))
				{
					this.OnIsApprovedChanging(value);
					this.SendPropertyChanging();
					this._IsApproved = value;
					this.SendPropertyChanged("IsApproved");
					this.OnIsApprovedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="Int")]
		public System.Nullable<int> CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					if (this._UserAccount.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="Int")]
		public System.Nullable<int> ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					if (this._UserAccount1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SalaryLoan_SalaryLoanInstallment", Storage="_SalaryLoanInstallments", ThisKey="SalaryLoanID", OtherKey="SalaryLoanID")]
		public EntitySet<SalaryLoanInstallment> SalaryLoanInstallments
		{
			get
			{
				return this._SalaryLoanInstallments;
			}
			set
			{
				this._SalaryLoanInstallments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_SalaryLoan", Storage="_Employee", ThisKey="EmployeeID", OtherKey="EmployeeID", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.SalaryLoans.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.SalaryLoans.Add(this);
						this._EmployeeID = value.EmployeeID;
					}
					else
					{
						this._EmployeeID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_SalaryLoan1", Storage="_Employee1", ThisKey="ApprovedBy", OtherKey="EmployeeID", IsForeignKey=true)]
		public Employee Employee1
		{
			get
			{
				return this._Employee1.Entity;
			}
			set
			{
				Employee previousValue = this._Employee1.Entity;
				if (((previousValue != value) 
							|| (this._Employee1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee1.Entity = null;
						previousValue.SalaryLoans1.Remove(this);
					}
					this._Employee1.Entity = value;
					if ((value != null))
					{
						value.SalaryLoans1.Add(this);
						this._ApprovedBy = value.EmployeeID;
					}
					else
					{
						this._ApprovedBy = default(Nullable<int>);
					}
					this.SendPropertyChanged("Employee1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserAccount_SalaryLoan", Storage="_UserAccount", ThisKey="CreatedBy", OtherKey="UserID", IsForeignKey=true)]
		public UserAccount UserAccount
		{
			get
			{
				return this._UserAccount.Entity;
			}
			set
			{
				UserAccount previousValue = this._UserAccount.Entity;
				if (((previousValue != value) 
							|| (this._UserAccount.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserAccount.Entity = null;
						previousValue.SalaryLoans.Remove(this);
					}
					this._UserAccount.Entity = value;
					if ((value != null))
					{
						value.SalaryLoans.Add(this);
						this._CreatedBy = value.UserID;
					}
					else
					{
						this._CreatedBy = default(Nullable<int>);
					}
					this.SendPropertyChanged("UserAccount");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserAccount_SalaryLoan1", Storage="_UserAccount1", ThisKey="ModifiedBy", OtherKey="UserID", IsForeignKey=true)]
		public UserAccount UserAccount1
		{
			get
			{
				return this._UserAccount1.Entity;
			}
			set
			{
				UserAccount previousValue = this._UserAccount1.Entity;
				if (((previousValue != value) 
							|| (this._UserAccount1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserAccount1.Entity = null;
						previousValue.SalaryLoans1.Remove(this);
					}
					this._UserAccount1.Entity = value;
					if ((value != null))
					{
						value.SalaryLoans1.Add(this);
						this._ModifiedBy = value.UserID;
					}
					else
					{
						this._ModifiedBy = default(Nullable<int>);
					}
					this.SendPropertyChanged("UserAccount1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SalaryLoanInstallments(SalaryLoanInstallment entity)
		{
			this.SendPropertyChanging();
			entity.SalaryLoan = this;
		}
		
		private void detach_SalaryLoanInstallments(SalaryLoanInstallment entity)
		{
			this.SendPropertyChanging();
			entity.SalaryLoan = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SalaryLoanInstallment")]
	public partial class SalaryLoanInstallment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _LoanInstallmentID;
		
		private System.Nullable<int> _SalaryLoanID;
		
		private System.Nullable<double> _Amount;
		
		private System.Nullable<System.DateTime> _PayedDate;
		
		private System.Nullable<int> _CreatedBy;
		
		private System.Nullable<System.DateTime> _CreatedDate;
		
		private System.Nullable<int> _ModifiedBy;
		
		private System.Nullable<System.DateTime> _ModifiedDate;
		
		private EntityRef<SalaryLoan> _SalaryLoan;
		
		private EntityRef<UserAccount> _UserAccount;
		
		private EntityRef<UserAccount> _UserAccount1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLoanInstallmentIDChanging(int value);
    partial void OnLoanInstallmentIDChanged();
    partial void OnSalaryLoanIDChanging(System.Nullable<int> value);
    partial void OnSalaryLoanIDChanged();
    partial void OnAmountChanging(System.Nullable<double> value);
    partial void OnAmountChanged();
    partial void OnPayedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnPayedDateChanged();
    partial void OnCreatedByChanging(System.Nullable<int> value);
    partial void OnCreatedByChanged();
    partial void OnCreatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedDateChanged();
    partial void OnModifiedByChanging(System.Nullable<int> value);
    partial void OnModifiedByChanged();
    partial void OnModifiedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedDateChanged();
    #endregion
		
		public SalaryLoanInstallment()
		{
			this._SalaryLoan = default(EntityRef<SalaryLoan>);
			this._UserAccount = default(EntityRef<UserAccount>);
			this._UserAccount1 = default(EntityRef<UserAccount>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoanInstallmentID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int LoanInstallmentID
		{
			get
			{
				return this._LoanInstallmentID;
			}
			set
			{
				if ((this._LoanInstallmentID != value))
				{
					this.OnLoanInstallmentIDChanging(value);
					this.SendPropertyChanging();
					this._LoanInstallmentID = value;
					this.SendPropertyChanged("LoanInstallmentID");
					this.OnLoanInstallmentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SalaryLoanID", DbType="Int")]
		public System.Nullable<int> SalaryLoanID
		{
			get
			{
				return this._SalaryLoanID;
			}
			set
			{
				if ((this._SalaryLoanID != value))
				{
					if (this._SalaryLoan.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSalaryLoanIDChanging(value);
					this.SendPropertyChanging();
					this._SalaryLoanID = value;
					this.SendPropertyChanged("SalaryLoanID");
					this.OnSalaryLoanIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Float")]
		public System.Nullable<double> Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PayedDate", DbType="Date")]
		public System.Nullable<System.DateTime> PayedDate
		{
			get
			{
				return this._PayedDate;
			}
			set
			{
				if ((this._PayedDate != value))
				{
					this.OnPayedDateChanging(value);
					this.SendPropertyChanging();
					this._PayedDate = value;
					this.SendPropertyChanged("PayedDate");
					this.OnPayedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="Int")]
		public System.Nullable<int> CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					if (this._UserAccount.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="Int")]
		public System.Nullable<int> ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					if (this._UserAccount1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SalaryLoan_SalaryLoanInstallment", Storage="_SalaryLoan", ThisKey="SalaryLoanID", OtherKey="SalaryLoanID", IsForeignKey=true)]
		public SalaryLoan SalaryLoan
		{
			get
			{
				return this._SalaryLoan.Entity;
			}
			set
			{
				SalaryLoan previousValue = this._SalaryLoan.Entity;
				if (((previousValue != value) 
							|| (this._SalaryLoan.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SalaryLoan.Entity = null;
						previousValue.SalaryLoanInstallments.Remove(this);
					}
					this._SalaryLoan.Entity = value;
					if ((value != null))
					{
						value.SalaryLoanInstallments.Add(this);
						this._SalaryLoanID = value.SalaryLoanID;
					}
					else
					{
						this._SalaryLoanID = default(Nullable<int>);
					}
					this.SendPropertyChanged("SalaryLoan");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserAccount_SalaryLoanInstallment", Storage="_UserAccount", ThisKey="CreatedBy", OtherKey="UserID", IsForeignKey=true)]
		public UserAccount UserAccount
		{
			get
			{
				return this._UserAccount.Entity;
			}
			set
			{
				UserAccount previousValue = this._UserAccount.Entity;
				if (((previousValue != value) 
							|| (this._UserAccount.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserAccount.Entity = null;
						previousValue.SalaryLoanInstallments.Remove(this);
					}
					this._UserAccount.Entity = value;
					if ((value != null))
					{
						value.SalaryLoanInstallments.Add(this);
						this._CreatedBy = value.UserID;
					}
					else
					{
						this._CreatedBy = default(Nullable<int>);
					}
					this.SendPropertyChanged("UserAccount");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserAccount_SalaryLoanInstallment1", Storage="_UserAccount1", ThisKey="ModifiedBy", OtherKey="UserID", IsForeignKey=true)]
		public UserAccount UserAccount1
		{
			get
			{
				return this._UserAccount1.Entity;
			}
			set
			{
				UserAccount previousValue = this._UserAccount1.Entity;
				if (((previousValue != value) 
							|| (this._UserAccount1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserAccount1.Entity = null;
						previousValue.SalaryLoanInstallments1.Remove(this);
					}
					this._UserAccount1.Entity = value;
					if ((value != null))
					{
						value.SalaryLoanInstallments1.Add(this);
						this._ModifiedBy = value.UserID;
					}
					else
					{
						this._ModifiedBy = default(Nullable<int>);
					}
					this.SendPropertyChanged("UserAccount1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SubDepartment")]
	public partial class SubDepartment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SubDepartmentID;
		
		private string _SubDepartmentName;
		
		private System.Nullable<int> _DepartmentID;
		
		private System.Nullable<int> _CreatedBy;
		
		private System.Nullable<System.DateTime> _CreatedDate;
		
		private System.Nullable<int> _ModifiedBy;
		
		private System.Nullable<System.DateTime> _ModifiedDate;
		
		private EntitySet<Employee> _Employees;
		
		private EntitySet<OTRate> _OTRates;
		
		private EntityRef<Department> _Department;
		
		private EntityRef<UserAccount> _UserAccount;
		
		private EntityRef<UserAccount> _UserAccount1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSubDepartmentIDChanging(int value);
    partial void OnSubDepartmentIDChanged();
    partial void OnSubDepartmentNameChanging(string value);
    partial void OnSubDepartmentNameChanged();
    partial void OnDepartmentIDChanging(System.Nullable<int> value);
    partial void OnDepartmentIDChanged();
    partial void OnCreatedByChanging(System.Nullable<int> value);
    partial void OnCreatedByChanged();
    partial void OnCreatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedDateChanged();
    partial void OnModifiedByChanging(System.Nullable<int> value);
    partial void OnModifiedByChanged();
    partial void OnModifiedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedDateChanged();
    #endregion
		
		public SubDepartment()
		{
			this._Employees = new EntitySet<Employee>(new Action<Employee>(this.attach_Employees), new Action<Employee>(this.detach_Employees));
			this._OTRates = new EntitySet<OTRate>(new Action<OTRate>(this.attach_OTRates), new Action<OTRate>(this.detach_OTRates));
			this._Department = default(EntityRef<Department>);
			this._UserAccount = default(EntityRef<UserAccount>);
			this._UserAccount1 = default(EntityRef<UserAccount>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubDepartmentID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SubDepartmentID
		{
			get
			{
				return this._SubDepartmentID;
			}
			set
			{
				if ((this._SubDepartmentID != value))
				{
					this.OnSubDepartmentIDChanging(value);
					this.SendPropertyChanging();
					this._SubDepartmentID = value;
					this.SendPropertyChanged("SubDepartmentID");
					this.OnSubDepartmentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubDepartmentName", DbType="VarChar(500)")]
		public string SubDepartmentName
		{
			get
			{
				return this._SubDepartmentName;
			}
			set
			{
				if ((this._SubDepartmentName != value))
				{
					this.OnSubDepartmentNameChanging(value);
					this.SendPropertyChanging();
					this._SubDepartmentName = value;
					this.SendPropertyChanged("SubDepartmentName");
					this.OnSubDepartmentNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DepartmentID", DbType="Int")]
		public System.Nullable<int> DepartmentID
		{
			get
			{
				return this._DepartmentID;
			}
			set
			{
				if ((this._DepartmentID != value))
				{
					if (this._Department.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDepartmentIDChanging(value);
					this.SendPropertyChanging();
					this._DepartmentID = value;
					this.SendPropertyChanged("DepartmentID");
					this.OnDepartmentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="Int")]
		public System.Nullable<int> CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					if (this._UserAccount.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="Int")]
		public System.Nullable<int> ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					if (this._UserAccount1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SubDepartment_Employee", Storage="_Employees", ThisKey="SubDepartmentID", OtherKey="SubDepartmentID")]
		public EntitySet<Employee> Employees
		{
			get
			{
				return this._Employees;
			}
			set
			{
				this._Employees.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SubDepartment_OTRate", Storage="_OTRates", ThisKey="SubDepartmentID", OtherKey="SubDepartmentID")]
		public EntitySet<OTRate> OTRates
		{
			get
			{
				return this._OTRates;
			}
			set
			{
				this._OTRates.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Department_SubDepartment", Storage="_Department", ThisKey="DepartmentID", OtherKey="DepartmentID", IsForeignKey=true)]
		public Department Department
		{
			get
			{
				return this._Department.Entity;
			}
			set
			{
				Department previousValue = this._Department.Entity;
				if (((previousValue != value) 
							|| (this._Department.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Department.Entity = null;
						previousValue.SubDepartments.Remove(this);
					}
					this._Department.Entity = value;
					if ((value != null))
					{
						value.SubDepartments.Add(this);
						this._DepartmentID = value.DepartmentID;
					}
					else
					{
						this._DepartmentID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Department");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserAccount_SubDepartment", Storage="_UserAccount", ThisKey="CreatedBy", OtherKey="UserID", IsForeignKey=true)]
		public UserAccount UserAccount
		{
			get
			{
				return this._UserAccount.Entity;
			}
			set
			{
				UserAccount previousValue = this._UserAccount.Entity;
				if (((previousValue != value) 
							|| (this._UserAccount.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserAccount.Entity = null;
						previousValue.SubDepartments.Remove(this);
					}
					this._UserAccount.Entity = value;
					if ((value != null))
					{
						value.SubDepartments.Add(this);
						this._CreatedBy = value.UserID;
					}
					else
					{
						this._CreatedBy = default(Nullable<int>);
					}
					this.SendPropertyChanged("UserAccount");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserAccount_SubDepartment1", Storage="_UserAccount1", ThisKey="ModifiedBy", OtherKey="UserID", IsForeignKey=true)]
		public UserAccount UserAccount1
		{
			get
			{
				return this._UserAccount1.Entity;
			}
			set
			{
				UserAccount previousValue = this._UserAccount1.Entity;
				if (((previousValue != value) 
							|| (this._UserAccount1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserAccount1.Entity = null;
						previousValue.SubDepartments1.Remove(this);
					}
					this._UserAccount1.Entity = value;
					if ((value != null))
					{
						value.SubDepartments1.Add(this);
						this._ModifiedBy = value.UserID;
					}
					else
					{
						this._ModifiedBy = default(Nullable<int>);
					}
					this.SendPropertyChanged("UserAccount1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Employees(Employee entity)
		{
			this.SendPropertyChanging();
			entity.SubDepartment = this;
		}
		
		private void detach_Employees(Employee entity)
		{
			this.SendPropertyChanging();
			entity.SubDepartment = null;
		}
		
		private void attach_OTRates(OTRate entity)
		{
			this.SendPropertyChanging();
			entity.SubDepartment = this;
		}
		
		private void detach_OTRates(OTRate entity)
		{
			this.SendPropertyChanging();
			entity.SubDepartment = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserAccounts")]
	public partial class UserAccount : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserID;
		
		private string _UserName;
		
		private string _Password;
		
		private System.Nullable<int> _EmployeeID;
		
		private EntitySet<Branch> _Branches;
		
		private EntitySet<Branch> _Branches1;
		
		private EntitySet<WorkOtherLocation> _WorkOtherLocations;
		
		private EntitySet<WorkOtherLocation> _WorkOtherLocations1;
		
		private EntitySet<BroughtForward> _BroughtForwards;
		
		private EntitySet<BroughtForward> _BroughtForwards1;
		
		private EntitySet<CreatedSalaryDetail> _CreatedSalaryDetails;
		
		private EntitySet<CreatedSalaryDetail> _CreatedSalaryDetails1;
		
		private EntitySet<DayOffRecord> _DayOffRecords;
		
		private EntitySet<DayOffRecord> _DayOffRecords1;
		
		private EntitySet<Department> _Departments;
		
		private EntitySet<Department> _Departments1;
		
		private EntitySet<Designation> _Designations;
		
		private EntitySet<Designation> _Designations1;
		
		private EntitySet<Employee> _Employees;
		
		private EntitySet<Employee> _Employees1;
		
		private EntitySet<EmployeeAttendance> _EmployeeAttendances;
		
		private EntitySet<EmployeeAttendance> _EmployeeAttendances1;
		
		private EntitySet<EmployeeSalaryDetail> _EmployeeSalaryDetails;
		
		private EntitySet<EmployeeSalaryDetail> _EmployeeSalaryDetails1;
		
		private EntitySet<FixedIncentive> _FixedIncentives;
		
		private EntitySet<FixedIncentive> _FixedIncentives1;
		
		private EntitySet<GrantedLeave> _GrantedLeaves;
		
		private EntitySet<GrantedLeave> _GrantedLeaves1;
		
		private EntitySet<OtherDeduction> _OtherDeductions;
		
		private EntitySet<OtherDeduction> _OtherDeductions1;
		
		private EntitySet<OTRate> _OTRates;
		
		private EntitySet<OTRate> _OTRates1;
		
		private EntitySet<OverTime> _OverTimes;
		
		private EntitySet<OverTime> _OverTimes1;
		
		private EntitySet<PersonalLeaveRecord> _PersonalLeaveRecords;
		
		private EntitySet<PersonalLeaveRecord> _PersonalLeaveRecords1;
		
		private EntitySet<SalaryAdvance> _SalaryAdvances;
		
		private EntitySet<SalaryAdvance> _SalaryAdvances1;
		
		private EntitySet<SalaryLoan> _SalaryLoans;
		
		private EntitySet<SalaryLoan> _SalaryLoans1;
		
		private EntitySet<SalaryLoanInstallment> _SalaryLoanInstallments;
		
		private EntitySet<SalaryLoanInstallment> _SalaryLoanInstallments1;
		
		private EntitySet<SubDepartment> _SubDepartments;
		
		private EntitySet<SubDepartment> _SubDepartments1;
		
		private EntitySet<VariableIncentive> _VariableIncentives;
		
		private EntitySet<VariableIncentive> _VariableIncentives1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnEmployeeIDChanging(System.Nullable<int> value);
    partial void OnEmployeeIDChanged();
    #endregion
		
		public UserAccount()
		{
			this._Branches = new EntitySet<Branch>(new Action<Branch>(this.attach_Branches), new Action<Branch>(this.detach_Branches));
			this._Branches1 = new EntitySet<Branch>(new Action<Branch>(this.attach_Branches1), new Action<Branch>(this.detach_Branches1));
			this._WorkOtherLocations = new EntitySet<WorkOtherLocation>(new Action<WorkOtherLocation>(this.attach_WorkOtherLocations), new Action<WorkOtherLocation>(this.detach_WorkOtherLocations));
			this._WorkOtherLocations1 = new EntitySet<WorkOtherLocation>(new Action<WorkOtherLocation>(this.attach_WorkOtherLocations1), new Action<WorkOtherLocation>(this.detach_WorkOtherLocations1));
			this._BroughtForwards = new EntitySet<BroughtForward>(new Action<BroughtForward>(this.attach_BroughtForwards), new Action<BroughtForward>(this.detach_BroughtForwards));
			this._BroughtForwards1 = new EntitySet<BroughtForward>(new Action<BroughtForward>(this.attach_BroughtForwards1), new Action<BroughtForward>(this.detach_BroughtForwards1));
			this._CreatedSalaryDetails = new EntitySet<CreatedSalaryDetail>(new Action<CreatedSalaryDetail>(this.attach_CreatedSalaryDetails), new Action<CreatedSalaryDetail>(this.detach_CreatedSalaryDetails));
			this._CreatedSalaryDetails1 = new EntitySet<CreatedSalaryDetail>(new Action<CreatedSalaryDetail>(this.attach_CreatedSalaryDetails1), new Action<CreatedSalaryDetail>(this.detach_CreatedSalaryDetails1));
			this._DayOffRecords = new EntitySet<DayOffRecord>(new Action<DayOffRecord>(this.attach_DayOffRecords), new Action<DayOffRecord>(this.detach_DayOffRecords));
			this._DayOffRecords1 = new EntitySet<DayOffRecord>(new Action<DayOffRecord>(this.attach_DayOffRecords1), new Action<DayOffRecord>(this.detach_DayOffRecords1));
			this._Departments = new EntitySet<Department>(new Action<Department>(this.attach_Departments), new Action<Department>(this.detach_Departments));
			this._Departments1 = new EntitySet<Department>(new Action<Department>(this.attach_Departments1), new Action<Department>(this.detach_Departments1));
			this._Designations = new EntitySet<Designation>(new Action<Designation>(this.attach_Designations), new Action<Designation>(this.detach_Designations));
			this._Designations1 = new EntitySet<Designation>(new Action<Designation>(this.attach_Designations1), new Action<Designation>(this.detach_Designations1));
			this._Employees = new EntitySet<Employee>(new Action<Employee>(this.attach_Employees), new Action<Employee>(this.detach_Employees));
			this._Employees1 = new EntitySet<Employee>(new Action<Employee>(this.attach_Employees1), new Action<Employee>(this.detach_Employees1));
			this._EmployeeAttendances = new EntitySet<EmployeeAttendance>(new Action<EmployeeAttendance>(this.attach_EmployeeAttendances), new Action<EmployeeAttendance>(this.detach_EmployeeAttendances));
			this._EmployeeAttendances1 = new EntitySet<EmployeeAttendance>(new Action<EmployeeAttendance>(this.attach_EmployeeAttendances1), new Action<EmployeeAttendance>(this.detach_EmployeeAttendances1));
			this._EmployeeSalaryDetails = new EntitySet<EmployeeSalaryDetail>(new Action<EmployeeSalaryDetail>(this.attach_EmployeeSalaryDetails), new Action<EmployeeSalaryDetail>(this.detach_EmployeeSalaryDetails));
			this._EmployeeSalaryDetails1 = new EntitySet<EmployeeSalaryDetail>(new Action<EmployeeSalaryDetail>(this.attach_EmployeeSalaryDetails1), new Action<EmployeeSalaryDetail>(this.detach_EmployeeSalaryDetails1));
			this._FixedIncentives = new EntitySet<FixedIncentive>(new Action<FixedIncentive>(this.attach_FixedIncentives), new Action<FixedIncentive>(this.detach_FixedIncentives));
			this._FixedIncentives1 = new EntitySet<FixedIncentive>(new Action<FixedIncentive>(this.attach_FixedIncentives1), new Action<FixedIncentive>(this.detach_FixedIncentives1));
			this._GrantedLeaves = new EntitySet<GrantedLeave>(new Action<GrantedLeave>(this.attach_GrantedLeaves), new Action<GrantedLeave>(this.detach_GrantedLeaves));
			this._GrantedLeaves1 = new EntitySet<GrantedLeave>(new Action<GrantedLeave>(this.attach_GrantedLeaves1), new Action<GrantedLeave>(this.detach_GrantedLeaves1));
			this._OtherDeductions = new EntitySet<OtherDeduction>(new Action<OtherDeduction>(this.attach_OtherDeductions), new Action<OtherDeduction>(this.detach_OtherDeductions));
			this._OtherDeductions1 = new EntitySet<OtherDeduction>(new Action<OtherDeduction>(this.attach_OtherDeductions1), new Action<OtherDeduction>(this.detach_OtherDeductions1));
			this._OTRates = new EntitySet<OTRate>(new Action<OTRate>(this.attach_OTRates), new Action<OTRate>(this.detach_OTRates));
			this._OTRates1 = new EntitySet<OTRate>(new Action<OTRate>(this.attach_OTRates1), new Action<OTRate>(this.detach_OTRates1));
			this._OverTimes = new EntitySet<OverTime>(new Action<OverTime>(this.attach_OverTimes), new Action<OverTime>(this.detach_OverTimes));
			this._OverTimes1 = new EntitySet<OverTime>(new Action<OverTime>(this.attach_OverTimes1), new Action<OverTime>(this.detach_OverTimes1));
			this._PersonalLeaveRecords = new EntitySet<PersonalLeaveRecord>(new Action<PersonalLeaveRecord>(this.attach_PersonalLeaveRecords), new Action<PersonalLeaveRecord>(this.detach_PersonalLeaveRecords));
			this._PersonalLeaveRecords1 = new EntitySet<PersonalLeaveRecord>(new Action<PersonalLeaveRecord>(this.attach_PersonalLeaveRecords1), new Action<PersonalLeaveRecord>(this.detach_PersonalLeaveRecords1));
			this._SalaryAdvances = new EntitySet<SalaryAdvance>(new Action<SalaryAdvance>(this.attach_SalaryAdvances), new Action<SalaryAdvance>(this.detach_SalaryAdvances));
			this._SalaryAdvances1 = new EntitySet<SalaryAdvance>(new Action<SalaryAdvance>(this.attach_SalaryAdvances1), new Action<SalaryAdvance>(this.detach_SalaryAdvances1));
			this._SalaryLoans = new EntitySet<SalaryLoan>(new Action<SalaryLoan>(this.attach_SalaryLoans), new Action<SalaryLoan>(this.detach_SalaryLoans));
			this._SalaryLoans1 = new EntitySet<SalaryLoan>(new Action<SalaryLoan>(this.attach_SalaryLoans1), new Action<SalaryLoan>(this.detach_SalaryLoans1));
			this._SalaryLoanInstallments = new EntitySet<SalaryLoanInstallment>(new Action<SalaryLoanInstallment>(this.attach_SalaryLoanInstallments), new Action<SalaryLoanInstallment>(this.detach_SalaryLoanInstallments));
			this._SalaryLoanInstallments1 = new EntitySet<SalaryLoanInstallment>(new Action<SalaryLoanInstallment>(this.attach_SalaryLoanInstallments1), new Action<SalaryLoanInstallment>(this.detach_SalaryLoanInstallments1));
			this._SubDepartments = new EntitySet<SubDepartment>(new Action<SubDepartment>(this.attach_SubDepartments), new Action<SubDepartment>(this.detach_SubDepartments));
			this._SubDepartments1 = new EntitySet<SubDepartment>(new Action<SubDepartment>(this.attach_SubDepartments1), new Action<SubDepartment>(this.detach_SubDepartments1));
			this._VariableIncentives = new EntitySet<VariableIncentive>(new Action<VariableIncentive>(this.attach_VariableIncentives), new Action<VariableIncentive>(this.detach_VariableIncentives));
			this._VariableIncentives1 = new EntitySet<VariableIncentive>(new Action<VariableIncentive>(this.attach_VariableIncentives1), new Action<VariableIncentive>(this.detach_VariableIncentives1));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="VarChar(150)")]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="VarChar(20)")]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeID", DbType="Int")]
		public System.Nullable<int> EmployeeID
		{
			get
			{
				return this._EmployeeID;
			}
			set
			{
				if ((this._EmployeeID != value))
				{
					this.OnEmployeeIDChanging(value);
					this.SendPropertyChanging();
					this._EmployeeID = value;
					this.SendPropertyChanged("EmployeeID");
					this.OnEmployeeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserAccount_Branch", Storage="_Branches", ThisKey="UserID", OtherKey="CreatedBy")]
		public EntitySet<Branch> Branches
		{
			get
			{
				return this._Branches;
			}
			set
			{
				this._Branches.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserAccount_Branch1", Storage="_Branches1", ThisKey="UserID", OtherKey="ModifiedBy")]
		public EntitySet<Branch> Branches1
		{
			get
			{
				return this._Branches1;
			}
			set
			{
				this._Branches1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserAccount_WorkOtherLocation", Storage="_WorkOtherLocations", ThisKey="UserID", OtherKey="CreatedBy")]
		public EntitySet<WorkOtherLocation> WorkOtherLocations
		{
			get
			{
				return this._WorkOtherLocations;
			}
			set
			{
				this._WorkOtherLocations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserAccount_WorkOtherLocation1", Storage="_WorkOtherLocations1", ThisKey="UserID", OtherKey="ModifiedBy")]
		public EntitySet<WorkOtherLocation> WorkOtherLocations1
		{
			get
			{
				return this._WorkOtherLocations1;
			}
			set
			{
				this._WorkOtherLocations1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserAccount_BroughtForward", Storage="_BroughtForwards", ThisKey="UserID", OtherKey="CreatedBy")]
		public EntitySet<BroughtForward> BroughtForwards
		{
			get
			{
				return this._BroughtForwards;
			}
			set
			{
				this._BroughtForwards.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserAccount_BroughtForward1", Storage="_BroughtForwards1", ThisKey="UserID", OtherKey="ModifiedBy")]
		public EntitySet<BroughtForward> BroughtForwards1
		{
			get
			{
				return this._BroughtForwards1;
			}
			set
			{
				this._BroughtForwards1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserAccount_CreatedSalaryDetail", Storage="_CreatedSalaryDetails", ThisKey="UserID", OtherKey="CreatedBy")]
		public EntitySet<CreatedSalaryDetail> CreatedSalaryDetails
		{
			get
			{
				return this._CreatedSalaryDetails;
			}
			set
			{
				this._CreatedSalaryDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserAccount_CreatedSalaryDetail1", Storage="_CreatedSalaryDetails1", ThisKey="UserID", OtherKey="ModifiedBy")]
		public EntitySet<CreatedSalaryDetail> CreatedSalaryDetails1
		{
			get
			{
				return this._CreatedSalaryDetails1;
			}
			set
			{
				this._CreatedSalaryDetails1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserAccount_DayOffRecord", Storage="_DayOffRecords", ThisKey="UserID", OtherKey="CreatedBy")]
		public EntitySet<DayOffRecord> DayOffRecords
		{
			get
			{
				return this._DayOffRecords;
			}
			set
			{
				this._DayOffRecords.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserAccount_DayOffRecord1", Storage="_DayOffRecords1", ThisKey="UserID", OtherKey="ModifiedBy")]
		public EntitySet<DayOffRecord> DayOffRecords1
		{
			get
			{
				return this._DayOffRecords1;
			}
			set
			{
				this._DayOffRecords1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserAccount_Department", Storage="_Departments", ThisKey="UserID", OtherKey="CreatedBy")]
		public EntitySet<Department> Departments
		{
			get
			{
				return this._Departments;
			}
			set
			{
				this._Departments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserAccount_Department1", Storage="_Departments1", ThisKey="UserID", OtherKey="ModifiedBy")]
		public EntitySet<Department> Departments1
		{
			get
			{
				return this._Departments1;
			}
			set
			{
				this._Departments1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserAccount_Designation", Storage="_Designations", ThisKey="UserID", OtherKey="CreatedBy")]
		public EntitySet<Designation> Designations
		{
			get
			{
				return this._Designations;
			}
			set
			{
				this._Designations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserAccount_Designation1", Storage="_Designations1", ThisKey="UserID", OtherKey="ModifiedBy")]
		public EntitySet<Designation> Designations1
		{
			get
			{
				return this._Designations1;
			}
			set
			{
				this._Designations1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserAccount_Employee", Storage="_Employees", ThisKey="UserID", OtherKey="CreatedBy")]
		public EntitySet<Employee> Employees
		{
			get
			{
				return this._Employees;
			}
			set
			{
				this._Employees.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserAccount_Employee1", Storage="_Employees1", ThisKey="UserID", OtherKey="ModifiedBy")]
		public EntitySet<Employee> Employees1
		{
			get
			{
				return this._Employees1;
			}
			set
			{
				this._Employees1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserAccount_EmployeeAttendance", Storage="_EmployeeAttendances", ThisKey="UserID", OtherKey="CreatedBy")]
		public EntitySet<EmployeeAttendance> EmployeeAttendances
		{
			get
			{
				return this._EmployeeAttendances;
			}
			set
			{
				this._EmployeeAttendances.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserAccount_EmployeeAttendance1", Storage="_EmployeeAttendances1", ThisKey="UserID", OtherKey="ModifiedBy")]
		public EntitySet<EmployeeAttendance> EmployeeAttendances1
		{
			get
			{
				return this._EmployeeAttendances1;
			}
			set
			{
				this._EmployeeAttendances1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserAccount_EmployeeSalaryDetail", Storage="_EmployeeSalaryDetails", ThisKey="UserID", OtherKey="CreatedBy")]
		public EntitySet<EmployeeSalaryDetail> EmployeeSalaryDetails
		{
			get
			{
				return this._EmployeeSalaryDetails;
			}
			set
			{
				this._EmployeeSalaryDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserAccount_EmployeeSalaryDetail1", Storage="_EmployeeSalaryDetails1", ThisKey="UserID", OtherKey="ModifiedBy")]
		public EntitySet<EmployeeSalaryDetail> EmployeeSalaryDetails1
		{
			get
			{
				return this._EmployeeSalaryDetails1;
			}
			set
			{
				this._EmployeeSalaryDetails1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserAccount_FixedIncentive", Storage="_FixedIncentives", ThisKey="UserID", OtherKey="CreatedBy")]
		public EntitySet<FixedIncentive> FixedIncentives
		{
			get
			{
				return this._FixedIncentives;
			}
			set
			{
				this._FixedIncentives.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserAccount_FixedIncentive1", Storage="_FixedIncentives1", ThisKey="UserID", OtherKey="ModifiedBy")]
		public EntitySet<FixedIncentive> FixedIncentives1
		{
			get
			{
				return this._FixedIncentives1;
			}
			set
			{
				this._FixedIncentives1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserAccount_GrantedLeave", Storage="_GrantedLeaves", ThisKey="UserID", OtherKey="CreatedBy")]
		public EntitySet<GrantedLeave> GrantedLeaves
		{
			get
			{
				return this._GrantedLeaves;
			}
			set
			{
				this._GrantedLeaves.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserAccount_GrantedLeave1", Storage="_GrantedLeaves1", ThisKey="UserID", OtherKey="ModifiedBy")]
		public EntitySet<GrantedLeave> GrantedLeaves1
		{
			get
			{
				return this._GrantedLeaves1;
			}
			set
			{
				this._GrantedLeaves1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserAccount_OtherDeduction", Storage="_OtherDeductions", ThisKey="UserID", OtherKey="CreatedBy")]
		public EntitySet<OtherDeduction> OtherDeductions
		{
			get
			{
				return this._OtherDeductions;
			}
			set
			{
				this._OtherDeductions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserAccount_OtherDeduction1", Storage="_OtherDeductions1", ThisKey="UserID", OtherKey="ModifiedBy")]
		public EntitySet<OtherDeduction> OtherDeductions1
		{
			get
			{
				return this._OtherDeductions1;
			}
			set
			{
				this._OtherDeductions1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserAccount_OTRate", Storage="_OTRates", ThisKey="UserID", OtherKey="CreatedBy")]
		public EntitySet<OTRate> OTRates
		{
			get
			{
				return this._OTRates;
			}
			set
			{
				this._OTRates.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserAccount_OTRate1", Storage="_OTRates1", ThisKey="UserID", OtherKey="ModifiedBy")]
		public EntitySet<OTRate> OTRates1
		{
			get
			{
				return this._OTRates1;
			}
			set
			{
				this._OTRates1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserAccount_OverTime", Storage="_OverTimes", ThisKey="UserID", OtherKey="CreatedBy")]
		public EntitySet<OverTime> OverTimes
		{
			get
			{
				return this._OverTimes;
			}
			set
			{
				this._OverTimes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserAccount_OverTime1", Storage="_OverTimes1", ThisKey="UserID", OtherKey="ModifiedBy")]
		public EntitySet<OverTime> OverTimes1
		{
			get
			{
				return this._OverTimes1;
			}
			set
			{
				this._OverTimes1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserAccount_PersonalLeaveRecord", Storage="_PersonalLeaveRecords", ThisKey="UserID", OtherKey="CreatedBy")]
		public EntitySet<PersonalLeaveRecord> PersonalLeaveRecords
		{
			get
			{
				return this._PersonalLeaveRecords;
			}
			set
			{
				this._PersonalLeaveRecords.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserAccount_PersonalLeaveRecord1", Storage="_PersonalLeaveRecords1", ThisKey="UserID", OtherKey="ModifiedBy")]
		public EntitySet<PersonalLeaveRecord> PersonalLeaveRecords1
		{
			get
			{
				return this._PersonalLeaveRecords1;
			}
			set
			{
				this._PersonalLeaveRecords1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserAccount_SalaryAdvance", Storage="_SalaryAdvances", ThisKey="UserID", OtherKey="CreatedBy")]
		public EntitySet<SalaryAdvance> SalaryAdvances
		{
			get
			{
				return this._SalaryAdvances;
			}
			set
			{
				this._SalaryAdvances.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserAccount_SalaryAdvance1", Storage="_SalaryAdvances1", ThisKey="UserID", OtherKey="ModifiedBy")]
		public EntitySet<SalaryAdvance> SalaryAdvances1
		{
			get
			{
				return this._SalaryAdvances1;
			}
			set
			{
				this._SalaryAdvances1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserAccount_SalaryLoan", Storage="_SalaryLoans", ThisKey="UserID", OtherKey="CreatedBy")]
		public EntitySet<SalaryLoan> SalaryLoans
		{
			get
			{
				return this._SalaryLoans;
			}
			set
			{
				this._SalaryLoans.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserAccount_SalaryLoan1", Storage="_SalaryLoans1", ThisKey="UserID", OtherKey="ModifiedBy")]
		public EntitySet<SalaryLoan> SalaryLoans1
		{
			get
			{
				return this._SalaryLoans1;
			}
			set
			{
				this._SalaryLoans1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserAccount_SalaryLoanInstallment", Storage="_SalaryLoanInstallments", ThisKey="UserID", OtherKey="CreatedBy")]
		public EntitySet<SalaryLoanInstallment> SalaryLoanInstallments
		{
			get
			{
				return this._SalaryLoanInstallments;
			}
			set
			{
				this._SalaryLoanInstallments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserAccount_SalaryLoanInstallment1", Storage="_SalaryLoanInstallments1", ThisKey="UserID", OtherKey="ModifiedBy")]
		public EntitySet<SalaryLoanInstallment> SalaryLoanInstallments1
		{
			get
			{
				return this._SalaryLoanInstallments1;
			}
			set
			{
				this._SalaryLoanInstallments1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserAccount_SubDepartment", Storage="_SubDepartments", ThisKey="UserID", OtherKey="CreatedBy")]
		public EntitySet<SubDepartment> SubDepartments
		{
			get
			{
				return this._SubDepartments;
			}
			set
			{
				this._SubDepartments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserAccount_SubDepartment1", Storage="_SubDepartments1", ThisKey="UserID", OtherKey="ModifiedBy")]
		public EntitySet<SubDepartment> SubDepartments1
		{
			get
			{
				return this._SubDepartments1;
			}
			set
			{
				this._SubDepartments1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserAccount_VariableIncentive", Storage="_VariableIncentives", ThisKey="UserID", OtherKey="CreatedBy")]
		public EntitySet<VariableIncentive> VariableIncentives
		{
			get
			{
				return this._VariableIncentives;
			}
			set
			{
				this._VariableIncentives.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserAccount_VariableIncentive1", Storage="_VariableIncentives1", ThisKey="UserID", OtherKey="ModifiedBy")]
		public EntitySet<VariableIncentive> VariableIncentives1
		{
			get
			{
				return this._VariableIncentives1;
			}
			set
			{
				this._VariableIncentives1.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Branches(Branch entity)
		{
			this.SendPropertyChanging();
			entity.UserAccount = this;
		}
		
		private void detach_Branches(Branch entity)
		{
			this.SendPropertyChanging();
			entity.UserAccount = null;
		}
		
		private void attach_Branches1(Branch entity)
		{
			this.SendPropertyChanging();
			entity.UserAccount1 = this;
		}
		
		private void detach_Branches1(Branch entity)
		{
			this.SendPropertyChanging();
			entity.UserAccount1 = null;
		}
		
		private void attach_WorkOtherLocations(WorkOtherLocation entity)
		{
			this.SendPropertyChanging();
			entity.UserAccount = this;
		}
		
		private void detach_WorkOtherLocations(WorkOtherLocation entity)
		{
			this.SendPropertyChanging();
			entity.UserAccount = null;
		}
		
		private void attach_WorkOtherLocations1(WorkOtherLocation entity)
		{
			this.SendPropertyChanging();
			entity.UserAccount1 = this;
		}
		
		private void detach_WorkOtherLocations1(WorkOtherLocation entity)
		{
			this.SendPropertyChanging();
			entity.UserAccount1 = null;
		}
		
		private void attach_BroughtForwards(BroughtForward entity)
		{
			this.SendPropertyChanging();
			entity.UserAccount = this;
		}
		
		private void detach_BroughtForwards(BroughtForward entity)
		{
			this.SendPropertyChanging();
			entity.UserAccount = null;
		}
		
		private void attach_BroughtForwards1(BroughtForward entity)
		{
			this.SendPropertyChanging();
			entity.UserAccount1 = this;
		}
		
		private void detach_BroughtForwards1(BroughtForward entity)
		{
			this.SendPropertyChanging();
			entity.UserAccount1 = null;
		}
		
		private void attach_CreatedSalaryDetails(CreatedSalaryDetail entity)
		{
			this.SendPropertyChanging();
			entity.UserAccount = this;
		}
		
		private void detach_CreatedSalaryDetails(CreatedSalaryDetail entity)
		{
			this.SendPropertyChanging();
			entity.UserAccount = null;
		}
		
		private void attach_CreatedSalaryDetails1(CreatedSalaryDetail entity)
		{
			this.SendPropertyChanging();
			entity.UserAccount1 = this;
		}
		
		private void detach_CreatedSalaryDetails1(CreatedSalaryDetail entity)
		{
			this.SendPropertyChanging();
			entity.UserAccount1 = null;
		}
		
		private void attach_DayOffRecords(DayOffRecord entity)
		{
			this.SendPropertyChanging();
			entity.UserAccount = this;
		}
		
		private void detach_DayOffRecords(DayOffRecord entity)
		{
			this.SendPropertyChanging();
			entity.UserAccount = null;
		}
		
		private void attach_DayOffRecords1(DayOffRecord entity)
		{
			this.SendPropertyChanging();
			entity.UserAccount1 = this;
		}
		
		private void detach_DayOffRecords1(DayOffRecord entity)
		{
			this.SendPropertyChanging();
			entity.UserAccount1 = null;
		}
		
		private void attach_Departments(Department entity)
		{
			this.SendPropertyChanging();
			entity.UserAccount = this;
		}
		
		private void detach_Departments(Department entity)
		{
			this.SendPropertyChanging();
			entity.UserAccount = null;
		}
		
		private void attach_Departments1(Department entity)
		{
			this.SendPropertyChanging();
			entity.UserAccount1 = this;
		}
		
		private void detach_Departments1(Department entity)
		{
			this.SendPropertyChanging();
			entity.UserAccount1 = null;
		}
		
		private void attach_Designations(Designation entity)
		{
			this.SendPropertyChanging();
			entity.UserAccount = this;
		}
		
		private void detach_Designations(Designation entity)
		{
			this.SendPropertyChanging();
			entity.UserAccount = null;
		}
		
		private void attach_Designations1(Designation entity)
		{
			this.SendPropertyChanging();
			entity.UserAccount1 = this;
		}
		
		private void detach_Designations1(Designation entity)
		{
			this.SendPropertyChanging();
			entity.UserAccount1 = null;
		}
		
		private void attach_Employees(Employee entity)
		{
			this.SendPropertyChanging();
			entity.UserAccount = this;
		}
		
		private void detach_Employees(Employee entity)
		{
			this.SendPropertyChanging();
			entity.UserAccount = null;
		}
		
		private void attach_Employees1(Employee entity)
		{
			this.SendPropertyChanging();
			entity.UserAccount1 = this;
		}
		
		private void detach_Employees1(Employee entity)
		{
			this.SendPropertyChanging();
			entity.UserAccount1 = null;
		}
		
		private void attach_EmployeeAttendances(EmployeeAttendance entity)
		{
			this.SendPropertyChanging();
			entity.UserAccount = this;
		}
		
		private void detach_EmployeeAttendances(EmployeeAttendance entity)
		{
			this.SendPropertyChanging();
			entity.UserAccount = null;
		}
		
		private void attach_EmployeeAttendances1(EmployeeAttendance entity)
		{
			this.SendPropertyChanging();
			entity.UserAccount1 = this;
		}
		
		private void detach_EmployeeAttendances1(EmployeeAttendance entity)
		{
			this.SendPropertyChanging();
			entity.UserAccount1 = null;
		}
		
		private void attach_EmployeeSalaryDetails(EmployeeSalaryDetail entity)
		{
			this.SendPropertyChanging();
			entity.UserAccount = this;
		}
		
		private void detach_EmployeeSalaryDetails(EmployeeSalaryDetail entity)
		{
			this.SendPropertyChanging();
			entity.UserAccount = null;
		}
		
		private void attach_EmployeeSalaryDetails1(EmployeeSalaryDetail entity)
		{
			this.SendPropertyChanging();
			entity.UserAccount1 = this;
		}
		
		private void detach_EmployeeSalaryDetails1(EmployeeSalaryDetail entity)
		{
			this.SendPropertyChanging();
			entity.UserAccount1 = null;
		}
		
		private void attach_FixedIncentives(FixedIncentive entity)
		{
			this.SendPropertyChanging();
			entity.UserAccount = this;
		}
		
		private void detach_FixedIncentives(FixedIncentive entity)
		{
			this.SendPropertyChanging();
			entity.UserAccount = null;
		}
		
		private void attach_FixedIncentives1(FixedIncentive entity)
		{
			this.SendPropertyChanging();
			entity.UserAccount1 = this;
		}
		
		private void detach_FixedIncentives1(FixedIncentive entity)
		{
			this.SendPropertyChanging();
			entity.UserAccount1 = null;
		}
		
		private void attach_GrantedLeaves(GrantedLeave entity)
		{
			this.SendPropertyChanging();
			entity.UserAccount = this;
		}
		
		private void detach_GrantedLeaves(GrantedLeave entity)
		{
			this.SendPropertyChanging();
			entity.UserAccount = null;
		}
		
		private void attach_GrantedLeaves1(GrantedLeave entity)
		{
			this.SendPropertyChanging();
			entity.UserAccount1 = this;
		}
		
		private void detach_GrantedLeaves1(GrantedLeave entity)
		{
			this.SendPropertyChanging();
			entity.UserAccount1 = null;
		}
		
		private void attach_OtherDeductions(OtherDeduction entity)
		{
			this.SendPropertyChanging();
			entity.UserAccount = this;
		}
		
		private void detach_OtherDeductions(OtherDeduction entity)
		{
			this.SendPropertyChanging();
			entity.UserAccount = null;
		}
		
		private void attach_OtherDeductions1(OtherDeduction entity)
		{
			this.SendPropertyChanging();
			entity.UserAccount1 = this;
		}
		
		private void detach_OtherDeductions1(OtherDeduction entity)
		{
			this.SendPropertyChanging();
			entity.UserAccount1 = null;
		}
		
		private void attach_OTRates(OTRate entity)
		{
			this.SendPropertyChanging();
			entity.UserAccount = this;
		}
		
		private void detach_OTRates(OTRate entity)
		{
			this.SendPropertyChanging();
			entity.UserAccount = null;
		}
		
		private void attach_OTRates1(OTRate entity)
		{
			this.SendPropertyChanging();
			entity.UserAccount1 = this;
		}
		
		private void detach_OTRates1(OTRate entity)
		{
			this.SendPropertyChanging();
			entity.UserAccount1 = null;
		}
		
		private void attach_OverTimes(OverTime entity)
		{
			this.SendPropertyChanging();
			entity.UserAccount = this;
		}
		
		private void detach_OverTimes(OverTime entity)
		{
			this.SendPropertyChanging();
			entity.UserAccount = null;
		}
		
		private void attach_OverTimes1(OverTime entity)
		{
			this.SendPropertyChanging();
			entity.UserAccount1 = this;
		}
		
		private void detach_OverTimes1(OverTime entity)
		{
			this.SendPropertyChanging();
			entity.UserAccount1 = null;
		}
		
		private void attach_PersonalLeaveRecords(PersonalLeaveRecord entity)
		{
			this.SendPropertyChanging();
			entity.UserAccount = this;
		}
		
		private void detach_PersonalLeaveRecords(PersonalLeaveRecord entity)
		{
			this.SendPropertyChanging();
			entity.UserAccount = null;
		}
		
		private void attach_PersonalLeaveRecords1(PersonalLeaveRecord entity)
		{
			this.SendPropertyChanging();
			entity.UserAccount1 = this;
		}
		
		private void detach_PersonalLeaveRecords1(PersonalLeaveRecord entity)
		{
			this.SendPropertyChanging();
			entity.UserAccount1 = null;
		}
		
		private void attach_SalaryAdvances(SalaryAdvance entity)
		{
			this.SendPropertyChanging();
			entity.UserAccount = this;
		}
		
		private void detach_SalaryAdvances(SalaryAdvance entity)
		{
			this.SendPropertyChanging();
			entity.UserAccount = null;
		}
		
		private void attach_SalaryAdvances1(SalaryAdvance entity)
		{
			this.SendPropertyChanging();
			entity.UserAccount1 = this;
		}
		
		private void detach_SalaryAdvances1(SalaryAdvance entity)
		{
			this.SendPropertyChanging();
			entity.UserAccount1 = null;
		}
		
		private void attach_SalaryLoans(SalaryLoan entity)
		{
			this.SendPropertyChanging();
			entity.UserAccount = this;
		}
		
		private void detach_SalaryLoans(SalaryLoan entity)
		{
			this.SendPropertyChanging();
			entity.UserAccount = null;
		}
		
		private void attach_SalaryLoans1(SalaryLoan entity)
		{
			this.SendPropertyChanging();
			entity.UserAccount1 = this;
		}
		
		private void detach_SalaryLoans1(SalaryLoan entity)
		{
			this.SendPropertyChanging();
			entity.UserAccount1 = null;
		}
		
		private void attach_SalaryLoanInstallments(SalaryLoanInstallment entity)
		{
			this.SendPropertyChanging();
			entity.UserAccount = this;
		}
		
		private void detach_SalaryLoanInstallments(SalaryLoanInstallment entity)
		{
			this.SendPropertyChanging();
			entity.UserAccount = null;
		}
		
		private void attach_SalaryLoanInstallments1(SalaryLoanInstallment entity)
		{
			this.SendPropertyChanging();
			entity.UserAccount1 = this;
		}
		
		private void detach_SalaryLoanInstallments1(SalaryLoanInstallment entity)
		{
			this.SendPropertyChanging();
			entity.UserAccount1 = null;
		}
		
		private void attach_SubDepartments(SubDepartment entity)
		{
			this.SendPropertyChanging();
			entity.UserAccount = this;
		}
		
		private void detach_SubDepartments(SubDepartment entity)
		{
			this.SendPropertyChanging();
			entity.UserAccount = null;
		}
		
		private void attach_SubDepartments1(SubDepartment entity)
		{
			this.SendPropertyChanging();
			entity.UserAccount1 = this;
		}
		
		private void detach_SubDepartments1(SubDepartment entity)
		{
			this.SendPropertyChanging();
			entity.UserAccount1 = null;
		}
		
		private void attach_VariableIncentives(VariableIncentive entity)
		{
			this.SendPropertyChanging();
			entity.UserAccount = this;
		}
		
		private void detach_VariableIncentives(VariableIncentive entity)
		{
			this.SendPropertyChanging();
			entity.UserAccount = null;
		}
		
		private void attach_VariableIncentives1(VariableIncentive entity)
		{
			this.SendPropertyChanging();
			entity.UserAccount1 = this;
		}
		
		private void detach_VariableIncentives1(VariableIncentive entity)
		{
			this.SendPropertyChanging();
			entity.UserAccount1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.VariableIncentive")]
	public partial class VariableIncentive : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IncentiveID;
		
		private System.Nullable<int> _EmployeeID;
		
		private string _IncentiveType;
		
		private System.Nullable<double> _IncentivePrecentage;
		
		private System.Nullable<int> _CreatedBy;
		
		private System.Nullable<System.DateTime> _CreatedDate;
		
		private System.Nullable<int> _ModifiedBy;
		
		private System.Nullable<System.DateTime> _ModifiedDate;
		
		private EntityRef<Employee> _Employee;
		
		private EntityRef<UserAccount> _UserAccount;
		
		private EntityRef<UserAccount> _UserAccount1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIncentiveIDChanging(int value);
    partial void OnIncentiveIDChanged();
    partial void OnEmployeeIDChanging(System.Nullable<int> value);
    partial void OnEmployeeIDChanged();
    partial void OnIncentiveTypeChanging(string value);
    partial void OnIncentiveTypeChanged();
    partial void OnIncentivePrecentageChanging(System.Nullable<double> value);
    partial void OnIncentivePrecentageChanged();
    partial void OnCreatedByChanging(System.Nullable<int> value);
    partial void OnCreatedByChanged();
    partial void OnCreatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedDateChanged();
    partial void OnModifiedByChanging(System.Nullable<int> value);
    partial void OnModifiedByChanged();
    partial void OnModifiedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedDateChanged();
    #endregion
		
		public VariableIncentive()
		{
			this._Employee = default(EntityRef<Employee>);
			this._UserAccount = default(EntityRef<UserAccount>);
			this._UserAccount1 = default(EntityRef<UserAccount>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IncentiveID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IncentiveID
		{
			get
			{
				return this._IncentiveID;
			}
			set
			{
				if ((this._IncentiveID != value))
				{
					this.OnIncentiveIDChanging(value);
					this.SendPropertyChanging();
					this._IncentiveID = value;
					this.SendPropertyChanged("IncentiveID");
					this.OnIncentiveIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeID", DbType="Int")]
		public System.Nullable<int> EmployeeID
		{
			get
			{
				return this._EmployeeID;
			}
			set
			{
				if ((this._EmployeeID != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmployeeIDChanging(value);
					this.SendPropertyChanging();
					this._EmployeeID = value;
					this.SendPropertyChanged("EmployeeID");
					this.OnEmployeeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IncentiveType", DbType="VarChar(500)")]
		public string IncentiveType
		{
			get
			{
				return this._IncentiveType;
			}
			set
			{
				if ((this._IncentiveType != value))
				{
					this.OnIncentiveTypeChanging(value);
					this.SendPropertyChanging();
					this._IncentiveType = value;
					this.SendPropertyChanged("IncentiveType");
					this.OnIncentiveTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IncentivePrecentage", DbType="Float")]
		public System.Nullable<double> IncentivePrecentage
		{
			get
			{
				return this._IncentivePrecentage;
			}
			set
			{
				if ((this._IncentivePrecentage != value))
				{
					this.OnIncentivePrecentageChanging(value);
					this.SendPropertyChanging();
					this._IncentivePrecentage = value;
					this.SendPropertyChanged("IncentivePrecentage");
					this.OnIncentivePrecentageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="Int")]
		public System.Nullable<int> CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					if (this._UserAccount.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="Int")]
		public System.Nullable<int> ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					if (this._UserAccount1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_VariableIncentive", Storage="_Employee", ThisKey="EmployeeID", OtherKey="EmployeeID", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.VariableIncentives.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.VariableIncentives.Add(this);
						this._EmployeeID = value.EmployeeID;
					}
					else
					{
						this._EmployeeID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserAccount_VariableIncentive", Storage="_UserAccount", ThisKey="CreatedBy", OtherKey="UserID", IsForeignKey=true)]
		public UserAccount UserAccount
		{
			get
			{
				return this._UserAccount.Entity;
			}
			set
			{
				UserAccount previousValue = this._UserAccount.Entity;
				if (((previousValue != value) 
							|| (this._UserAccount.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserAccount.Entity = null;
						previousValue.VariableIncentives.Remove(this);
					}
					this._UserAccount.Entity = value;
					if ((value != null))
					{
						value.VariableIncentives.Add(this);
						this._CreatedBy = value.UserID;
					}
					else
					{
						this._CreatedBy = default(Nullable<int>);
					}
					this.SendPropertyChanged("UserAccount");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserAccount_VariableIncentive1", Storage="_UserAccount1", ThisKey="ModifiedBy", OtherKey="UserID", IsForeignKey=true)]
		public UserAccount UserAccount1
		{
			get
			{
				return this._UserAccount1.Entity;
			}
			set
			{
				UserAccount previousValue = this._UserAccount1.Entity;
				if (((previousValue != value) 
							|| (this._UserAccount1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserAccount1.Entity = null;
						previousValue.VariableIncentives1.Remove(this);
					}
					this._UserAccount1.Entity = value;
					if ((value != null))
					{
						value.VariableIncentives1.Add(this);
						this._ModifiedBy = value.UserID;
					}
					else
					{
						this._ModifiedBy = default(Nullable<int>);
					}
					this.SendPropertyChanged("UserAccount1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
